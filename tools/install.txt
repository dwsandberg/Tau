#!/bin/sh  tau stdlib common tools formatdoc tools/install #

/< /section Installing Tau   />

Make sure clang is installed.   For Mac OS Clang is available if the command line tools are installed.

Down load zip file from GitHub  (Repository is dwsandberg/Tau

Unzip to directory a which we will call <Tau>.  This directory will become the working directory for tau.    You are free to choose another name.  

Modify PATH environment variable to include absolute path to <Tau>/bin. 

Open terminal and change direcotry to <Tau>.

Run "bash bin/installtau".  This is likely to generate a warning message about the llvm spec. 


/< /section HelloWorld />

1. Create a new directory <Tau>/HelloWorld

2. Create a file txt file <Tau>/HelloWorld/HelloWorld.ls that contains:

/keyword Library HelloWorld   use stdlib  exports HelloWorld

Module HelloWorld

use standard 

Function entrypoint(args:UTF8) UTF8 HTMLformat."Hello World!"

3. From terminal run: /< block  stdlib HelloWorld x | html /> 

This will create a program with the name of HelloWord from the source code in
directory <tau>/HelloWorld.  Since another argument is present in this case "x", the program
Helloworld will be ran with the remaining arguments.  The pipe to html will open
the default browser with the result of running "HelloWorld x".

If "x" was not present then Helloworld would not be ran and a 
message displayed indicating the program was successfully created.  

HelloWorld can be run from the prompt: /< block HelloWord   | html /> This will display "Hello World!" in the web browser. 

/< /section HelloWorld with dynamic libraries />
The Mac OS X implementation also allows  dynamic libraries to be created instead of programs.
The command is    /< block tau stdlib HelloWorld x | html /> 

In this command /em tau refers to a script in <tau>/bin/tau.  The next word, /em stdlib 
, refers to a dynamic library <tau>/stdlib.dylib which tau will load 
and pass the rest of the command line as an argument to stdlib. 

The library stdlib takes /em "HelloWorld" and creates another dynamic library <tau>/Helloworld.dylib
from the src in <tau>/HelloWorld.  Helloworld.dylib is then loaded and
the entrypoint function is call with any remaining arguments, which in this case is "x"
If no args are present, then execute stops with the creation of HelloWorld.dylib.

Once HelloWorld.dylib is created, the program can be run with
/< block tau  HelloWorld arg /> without any compiling taking place.

One can direct the output to a file with
/< block tau -f file.html HelloWorld arg />

4. Many text editors allow scripts to be run.  To change HelloWorld into a script
add as the first line  of the  HelloWorld.ls,  the line
/< block #!/bin/sh  tau stdlib  HelloWorld /> followed by a blank line. 
Your text editor may run HelloWorld as a script without setting the execute bit. 
To set the execute bit, use /< block chmod +x HelloWorld/HelloWorld.ls />


/< /section Installing Web Assembly Cross Compiler />

Since wasm files cannot be served from filesystem a web server is require.  OSX has an apache web server pre-installed so we will use that server
with the DocumentRoot being <Tau>.  Below is the list of configuration changes that need to be made.  Google to find details on how to make these changes.

Change the user to your user name to avoid permission problems.
 /<  block User David />
Change the document root to <Tau>  
 /< block DocumentRoot "<Tau>" /br
<Directory   "<Tau>" > /> 

Since files are cached by browse change cache control to retrieve new copy when file is changed on server.  To do this add the
directive  /< block set Cache-Control no-cache /> to the <IfModule headers_module> section of the configuration file.

A CGI is used to write files on the server.  To enable this CGI change the
ScriptAliasMatch to /< block 
   ScriptAliasMatch ^/cgi-bin/((?!(?i:webobjects)).*$) "/Users/david/work/bin/$1"
/> and add /< block <FilesMatch "/Users/david/work/bin/putfile.cgi">
 \br   SetHandler cgi-script
\br </FilesMatch> />

Restart the Apache web server. 

To see if all is working properly run the command /< block 
tauÂ -w http://localhost/  stdlib   webassembly  wtests wtests  />
This should open a web browser  with a link wtest. Follow the link which should open a page with two buttons that will run two tests.

/< noformat <hr> />
/< /section Documentation below is not complete. />

/section vhost

edit vhost and  dulicate the localhost line and change localhost to myhost.test

uncomment vhost line in httpd.conf

edit httpd-vhosts.conf

---

sudo ssh-keygen -f server.key -m PEM

/section security

 Is the user who he claims to be?
 
 Is the user authorized for action provided ?
 
Token
  createdate  user action signature 
  
  hour*60+10*second of time of creation --gives 4 digit decimal number
  
  Authenticator
    table of  user(key) password(hashed)  email phone  
    
    table of user tempkey
    
    table of  user action 
    
 Login
    
    user presents user password tempkey Authenticator
    
    Authenticator: if password matches  sends  email with random code (saving randome code user tempkey
    and time send)
    
    Users: presents  user password tempkey  code
  
    Authenticator sends token to user with action "create token"
   
 User request for token
      sends temp key and code
  
Request for signature verification 
     just send token



