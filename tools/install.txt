#!/bin/sh  tau stdlib common tools formatdoc tools/install #

/< /section Installing Tau   />

Make sure clang is installed.   For Mac OS Clang is available if the command line tools are installed.

Down load zip file from GitHub  (Repository is dwsandberg/Tau

Unzip to directory a which we will call <Tau>.  This directory will become the working directory for tau.    You are free to choose another name.  

Modify PATH environment variable to include absolute path to <Tau>/bin. 

Open terminal and change direcotry to <Tau>.

Run "bash bin/installtau".  This is likely to generate a warning message about the llvm spec. 


/< /section HelloWorld />

1. Create a new directory <Tau>/HelloWorld

2. Create a file txt file <Tau>/HelloWorld/HelloWorld.ls that contains:

/keyword Library HelloWorld   uses stdlib  exports HelloWorld

Module HelloWorld

use standard 

use format

Function entrypoint(args:UTF8) UTF8 HTMLformat."Hello World!"

3. From terminal run: /< block  tau stdlib HelloWorld x  /> 

This will create a program with the name of HelloWord from the source code in
directory <tau>/HelloWorld.  Since another argument is present in this case "x", the program
Helloworld will be ran with the remaining arguments and open a web browser with the results.

If "x" was not present then Helloworld would not be ran and a 
message displayed indicating the program was successfully created.  

HelloWorld can now be run from the prompt: /< block tau HelloWord  /> This will display "Hello World!" in the web browser. 

/< /section HelloWorld with dynamic libraries />
The Mac OS X implementation also allows  dynamic libraries to be created instead of programs.
The command is    /< block ltau stdlib HelloWorld x   /> 

In this command /em ltau refers to a script in <tau>/bin.  The next word, /em stdlib 
, refers to a dynamic library <tau>/stdlib.dylib which tau will load 
and pass the rest of the command line as an argument to stdlib. 

The library stdlib takes /em "HelloWorld" and creates another dynamic library <tau>/Helloworld.dylib
from the src in <tau>/HelloWorld.  Helloworld.dylib is then loaded and
the entrypoint function is call with any remaining arguments, which in this case is "x"
If no args are present, then execute stops with the creation of HelloWorld.dylib.

Once HelloWorld.dylib is created, the program can be run with
/< block ltau  HelloWorld arg /> without any compiling taking place.


4. Many text editors allow scripts to be run.  To change HelloWorld into a script
add as the first line  of the  HelloWorld.ls,  the line
/< block #!/bin/sh  tau stdlib  HelloWorld /> followed by a blank line. 
Your text editor may run HelloWorld as a script without setting the execute bit. 
To set the execute bit, use /< block chmod +x HelloWorld/HelloWorld.ls />


/< /section Installing Web Assembly Cross Compiler />

Since wasm files cannot be served from filesystem a web server is required. 
OSX has an Apache web server pre-installed.  The details of how to configure the
Apache web server is not hard but the details vary with OS so only the gist of what needs to 
be done is given here.

Set up a virtual host Below is an example configuretion.  The quotes strings
will need to be updated with absolute path of you <Tau> directory.
/< block 
<VirtualHost *:80>
    ServerName  myhost.local
/br    DocumentRoot "/Users/david/Tau"
/br    <Directory   "/Users/david/Tau" >
/< block       Options FollowSymLinks Multiviews
/br       MultiviewsMatch Any
/br       AllowOverride None
/br       Require all granted
/>   </Directory>
/br   ScriptAliasMatch ^/cgi-bin/((?!(?i:webobjects)).*$) "/Users/david/Tau/bin/$1"
/br    ErrorLog "/private/var/log/apache2/myhost-error_log"
/br    CustomLog "/private/var/log/apache2/myhost-access_log" common  
/br </VirtualHost>
/>

To avoid file permission problems add the group of the web server
as one of your groups.  Make that you default group.
Change the user to your user name to avoid permission problems.
An alternative is to run the web server under you user.

Since files are cached by browse change cache control to retrieve new copy when file is changed on server.  To do this add the
directive  /< block set Cache-Control no-cache /> to the <IfModule headers_module> section of the configuration file.

The  <Tau>/bin/putfile.cgi is needed to write files back to the server.

Restart the Apache web server. 

To see if all is working properly run the command /< block 
wtau     wtests wtests  />
This should open a web browser  with page with a button. 
Push the button to run the test.  All the test should pass.

/< noformat <hr> />
/< /section Documentation below is not complete. />

/section vhost

edit vhost and  dulicate the localhost line and change localhost to myhost.test

uncomment vhost line in httpd.conf

edit httpd-vhosts.conf

---

sudo ssh-keygen -f server.key -m PEM

/section security

 Is the user who he claims to be?
 
 Is the user authorized for action provided ?
 
Token
  createdate  user action signature 
  
  hour*60+10*second of time of creation --gives 4 digit decimal number
  
  Authenticator
    table of  user(key) password(hashed)  email phone  
    
    table of user tempkey
    
    table of  user action 
    
 Login
    
    user presents user password tempkey Authenticator
    
    Authenticator: if password matches  sends  email with random code (saving randome code user tempkey
    and time send)
    
    Users: presents  user password tempkey  code
  
    Authenticator sends token to user with action "create token"
   
 User request for token
      sends temp key and code
  
Request for signature verification 
     just send token



