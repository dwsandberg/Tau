/< /section The Tau Programming Language />

Programming languages today look pretty much the same as they did 30 years ago. Today they may have a few more features but are not substancally better as a notation for thought. I have created another programming language in attempt to introduce a new way to think about programming.

This new language is different because there is:
/< block —No assignment operator. /br —No loop/while statement 
/br —No function type./br —Only uses program state in a very controlled way. /br —Words are the basic text element instead of characters. 
/br —Heavy use of sequences. 
/br —Introduces a new control structure for iterating through loops./>

Functional program languages have no assignment operator or loop statements, but tend to be based on the lamada calculus which makes use of higher order functions. We only include the basic operations on function of declaring and calling of them and the binding of unbound function to an actual function in an instantiation of a function from a parameterized module.

Functional languages tend to use recursion to replace the control structures of loops. 
The full power of recursion is seldom needed. 
We introduce a  new control structure  to cover many of the simple uses of recursion.

Instruction for downloading and install Tau in /< noformat <a href="install.html"> here </a> /> if you would
like to try out the examples below for yourself.

/< /section Lexical level />

A program is represented as a sequence of characters. The character encoding is assume to be unicode represented in UTF8 format. The program is broken into a sequence of paragraphs where one or more blank lines separate the paragraphs.

Paragraphs that do NOT start with /keyword type, /keyword use, /keyword Library,
 /keyword module, /keyword Function /keyword function, /keyword unbound,  or /keyword Export are always treated as comments.

Each paragraph is broken into words. One or more spaces separate the words. A single line break is treated the same as a space. 
The characters ()+,-.:=[]{}^_" are all treated as if they have an implied space before and after them so they are words formed from a single character. For example, "a + b" is equivalent to  "a+b"; but  "a * b" is not equivalent to "a*b". A period followed by a space is treat as a separate word from a period followed by no space. This allows a period at the end of a sentence to be distinguished from a period in google.com. 

A word sequence literal is double quoted like "This is a string Literal."  

To include a double quote within a use "$(dq)".  Inculding "$(...)" in a syntactical short  hand.
  /< block " hello world without quotes $(dq) hello world $(dq) with quotes" /> is the sames as 
  writing 
  /< block $($($($(" hello world without quotes",dq),"hello world"),dq), "with quotes") /> 
  which is equivalent to writing
  /< block  " hello world without quotes"+dq+"hello world " +dq+ "with quotes" />
  Since $(...) can receive any expression we could also write
  /< block "hello world without quotes $(dq."hello world") with quotes" />
  Since $( functions as an escape in strings, it can be include within a string
  as " $("$")( " Note that just the "$" is escaped as "$("$(")" will raise an error because the escape in the inner qoute not properly formed.
  

An integer literal is represented by a sequence of words where each word only contains digits or the no break space. 
A real number is two integer separated by a period. For example 0.0 and 10.01 are real numbers where 00 and 1001 are integers.

For easy entry, ASCII equivalents for ≤ ≥ ≠ ∧ ∨  ∈ ∉ ∩ ∪ are  /le  /ge  /ne  /and  /or /in /nin /cap /cup respectively.

Be careful to insert necessary spaces around operators. 8*9 is incorrect and should be written as 8 * 9, but (8)*(9) is ok.

Occasionally some unexpected lexical issues arise.   The syntax for a let statement is 
 /keyword let <name> = <expresion> <expresion>.
 The follow function looks good but will cause a syntax error:

/keyword function f1 int /br /keyword let x=  56  /br  -4+x  
 
Written on a single line, the problem becomes clear as there is no second expression:  /keyword function f1 int /keyword let x=  56    -4+x 

The fix is to add parenthesizes 

/keyword function f1 int  /keyword let x=  56    (-4+x)


When converting a sequence of words  to characters for output, an space is usually added after each word with the exceptions:
/br 1. If the word is  "()+-[]{}_.. :^   
then the space before and after the word is not added. 
/br 2. If the word is a comma then the space before the comma is suppressed.

These rules  sometimes do not produce the desired result.  To improve the result, no-break spaces can be added. 
 On the Mac keyboard pressing the option key and then space bar will insert a no-break space. 

/< /section Expressions />

Here is a list of infix binary operators. The operators on the same line are the same precedence and higher precedence than those on the following line.
/br _^
/br unary minus
/br * / mod ∪ ∩ \
/br  +-∈ ∉
/br = < > ? ≤ ≥ ≠ >> <<
/br ∧
/br ∨

Parentheses are used to override the default precedence.  Note that the operators ∪ ∩ \ which are commonly used for set union, intersection and differences all have that same precedence.

Procedure calls are of the form f1(p1, p2, …, pn). f1()is illegal and should be written f1. To avoid excessive parentheses in expressions f1(p1)is equivalent to f1.p1. The precedence of. is between the_and the *.

The operators ≤ ≥ ≠ are abbreviations for   not(a > b) , not ( a < b ), not(a = b) respectively. 


The compilation unit in tau is  a library. A library contains modules. A module is a sequence of paragraphs with this first paragraph starting with the word /keyword module.

A paragraph is a sequence of words. Paragraphs that do NOT start with /keyword type, /keyword use, /keyword Library,
 /keyword module, /keyword Function /keyword function, /keyword unbound,  or /keyword Export are always treated as comments.



The syntax for non-comment paragraphs is /< block <paragraph>→ /keyword module <word>.T | /keyword module <word>  | <definition> /br <paragraph>→ /keyword use <type> 
/br <paragraph>→ /keyword type <word> /keyword is  <name list> 
/br <paragraph>→ /keyword Export <function> 
/br <paragraph>→ /keyword unbound <function> 
/br <paragraph>→ /keyword Function <function> /em E
/br <paragraph>→ /keyword function <function> /em E
/br <name list>→ <word>:<type> | <name list>, <word>:<type> 
/br   <function > → <function name>(<name list>)<type>     
/br   <function > → <function name> <type>      
/br <let name>→ <word> /br <parameter name>→ <word> /br <type>→ <word> 
/br <type>→ <word>.<type> /br <function call>→ <function name> | <function name>(/em EList)
/br /em E → <function call> |<parameter name> |<let name> 
/br /em E → /keyword if /em E /keyword then /em E /keyword else /em E 
/br /em E → /keyword if /em E /keyword then /em E /keyword else /em E /keyword /if
/br /em E → (/em E )/br /em E → /em E  <binary op> /em E  
/br /em E → -/em E /br /em E → <word>./em E  
/br /em E→  /em sequenceConstructor  /br  /em sequenceConstructor → [ /em EList]/br /em EList→ /em E  | /em EList, /em E  
/br /em forItems →   <word> = /em E , /em forItems | <word> ∈ /em E
/br /em E →  /keyword  for  /em forItems /keyword do /em E   /keyword /for ( /em E ) 
/br /em E →  /keyword  for  /em forItems /keyword while /em E /keyword do /em E   /keyword /for ( /em E ) 
/br /em E → /keyword let <let name> = /em E /em E 
/br /em E → /keyword assert /em E /keyword report /em E /em E  
/br /em E → { < words forming a comment with the brackets outside of double quotes balanced  > } /em E  
/br /em E → process.<function call> | process(<function call>)/>

Comments are traditionally defined at the lexical level. In tau they are defined as a prefix operator so that they can easily be included in a parse tree.

/< /section Sequences />

A sequence is a function whose domain is the integers and whose range is some type. A literal for a sequence of integers is represented as [ 2, 4, 8, 16, 32]. We can refer to this sequence as test1 if we define

/keyword function test1 seq.int [ 2, 4, 8, 16, 32]

The type for a sequence of integers is seq.int. The length of the sequence can be obtained by calling the function length. In this case the length(test1)is 5. There is a subscript operator_that can obtain the elements of the list:test1_1 is 2 and test1_5 is 32.

Negative values for the sequence count the elements from the end of the sequence: test1_-1 is the last element in the sequence, 32.

A sequence of characters in double quotes does not represent a sequence of characters but a sequence of words.“Hello World!” represent two words.

The code [ “Hello”_1, ”World!”_1]is equivalent to “Hello World!”


""represents an empty sequence of words. An empty sequences has a length of zero. Since the type of a empty sequence can not be inferred from the type of its elements the empty sequence of int is coded as empty:seq.int.

The elements of a sequence can themselves be sequences [ [ 3, 4], [ 3, 6, 7], [ 8, 9]]. The type of this sequence is seq.seq.int. The empty sequence of this type is represented by empty:seq.seq.int.

The concatenation operator for sequences is +, for example the expression test1 + [ 2, 3] evaluates to [ 2, 4, 8, 16, 32, 2, 3]

Sub-sequences are obtain with subseq(s:seq.T, start:int, stop:int)seq.T where T is any type. For example, the expression subseq(test1, 3, 4)evaluates to [ 8, 16]

/< /section Types />

The type of an expression can always be inferred from the sub-expression. For example, 1.0 + 5.0 is of type real, 1 * 8 is of type int, and 1.0 = 8.0 is of type boolean.

User defined types can be either a record, a sequence, or a parameterized record. Below a user defined record type is defined as an example.

The following paragraph starts a new module. A module is a collection of functions and types.

module point2d


The follow paragraph that begins with /keyword use allows reference to functions defined in another module. In this case, the standard library functions. 
Documentation of the standard module is   /< noformat <a href ='stdlib.html#standard'>  here </a>  />

use standard

Here is a simple type definition that introduces a new type with two components.

type point2d is x:int, y:int

To allow the type name to be used outside this module we export the type  using a special syntax that omits the return type of the Export:

 Export type:point2d

To allow the constructor for points to be used outside the module we export it:

Export point2d(a:int, b:int)point2d 

Access to the fields outside the module is granted with: 

 Export x( int )point2d  

 Export y( point2d)int  


The following two paragraphs defines an addition and subtraction function on the type point2d. 
If a function starts with  /keyword  function  instead of /keyword   Function  the function is also not available outside the module.


Function +(a:point2d, b:point2d)point2d point2d(x.a + x.b, y.a + y.b)

Function-(a:point2d, b:point2d)point2d point2d(x.a - x.b, y.a - y.b)

Function print(p:point2d)seq.word 
 "("+ toword.x.p +","+ toword.y.p +")"


 Function testpoint seq.word print(point2d(2, 3)+ point2d(4, 5))

Since a program is sequence of paragraphs.The above text can be placed in a file and 
turned into a running program.  A module lives with in the context of a library.  
So a file name point2d.ls  is required with the first   paragraphs  being:

Library point2d uses stdlib exports point2d 

The remainder  of the file is the above text.    This file can then be place in a subdirectory named point2d.  Then the program can be compile and executed with  /< block ./taumain “point2d point2d testpoint” />


/section standard

The module standard defines several commonly used types.

The types /em int and /em real are implement by the underlying hardware and have the usual operations. A more complete definition of will be supplied in a future release.

The type boolean has operators:∧ ∨ /em not /em true and /em false. The second operator of ∧  and ∨ is evaluated if and only if the first operator does not determine the result.

For working with total orderings a type /em ordering with the values /em LT /em EQ and /em GT is defined. The binary operator ? on integers returns these values. An ∧ operator on orderings is defined as

  Function ∧(a:ordering, b:ordering)ordering 
  if a = EQ   then b   else a

/< /section Iteration />

An operation can be performed on each element of a sequence.  The following sums a sequence:

 function sum(s:seq.int) int  for   accumulator=0 ,e ∈ s    do accumalator+e    /for(accumulator)

More than one accumulator is allowed. The following takes the average of the sequence

  function sum(s:seq.int) int for   count=0,sum=0, e ∈ s   do next(count+1,sum+e)    /for( sum / count)

For each element of the sequence the  expression after the /keyword do is executed giving new values to the accumulators. 

It is possible to not examine all elements of the sequence.  The following stops examining elements when /em ele is found

 
function /in(s:seq.int,ele:int) boolean   
  for found = false, i ∈ s   while not.found   do ele = i  /for(found)




/< /section Parameterized Module />

A type can have a single type parameter of named T. The T can be used anywhere a type can be used.

Generic unbound functions on the type T may be included by using the word unbound as the defining expression. When the parameterized type is used, there must exist a function with the same signature as the unbound one where T is replaced with the actual type for T.

As an example the follow defines a parameterized set implemented as a sequence

  module listset.T

  use standard

  use seq.T

  unbound =(T, T)boolean

  type listset is toseq:seq.T

 Export type:listset.T

  Export toseq(s:listset.T)seq.T

  Function empty:listset.T listset.T listset.empty:seq.T

  Function ∈(ele:T, s:listset.T)boolean ele ∈ toseq.s

 Function +(s:listset.T, ele:T)listset.T if ele ∈ s then s else listset([ ele]+ toseq.s)

  Function tolistset(s:seq.T)listset.T {construct a listset from a sequence}
for acc = empty:listset.T, ele ∈ s do acc + ele /for(acc)

  Function ∪(a:listset.T, b:listset.T)listset.T { This union is constructed so if a element is in both a and b the representation in a is use in the result } for acc = a, ele ∈ toseq.b do acc + ele /for(acc)

  Export isempty(seq.T)boolean

  Export_(seq.T, int)T

  Function lookup(s:listset.T, ele:T)seq.T lookup(toseq.s, ele) 

The purpose of the last three function of the above module will become clear below.

Module testlistset

use standard

use listset.word

The following function uses a let statement.  A let statement in a function allows an name to be given to an expression so the name can be used in the expression that follows.
A let statement DOES NOT define a variable that can change values.


Function test7 seq.word 
let set1 = tolistset."A A B C A C B"
let set2 = tolistset."D B E"
if toseq.set1 = "C B A" ∧ first."C" ∈ set1
 ∧ first."D" ∉ set1
 ∧ toseq(set1 ∪ set2) = "D E C B A"then
 "PASS"
 else"FAIL"

Sets can be used to implement dictionaries.   A dictionary contains entries.  
Each entry contains a key and a data component.  A type is declared to represent an entry.  In this example the key will be an integer and the key a string. 
Entries will be equal if and only if the keys are equal.

 type myentry is key:int, data:seq.word

 function =(a:myentry, b:myentry)boolean key.a = key.b

Now a set of entries will be a dictionary.   From the mathematical view of the set each entry is an representation of an entry.  The integer 3 could be represented by
 myentry(3,"X") , myentry (3,"A B C") or and infinite number of other possibilities.  But only one representation will be used in any listset.myentry.

Looking up an entry in the dictionary is just looking up the representation used in the set.  The last
function in the /em listset module does just that.  The A ∪ B function in the listset mmodule is carefully crafted
so that if and element is in both A and B  the representation of used in A is used in the result.  Thus 
 listset.[myentry(3,"X")] ∪ B will redefine the entry in B if it exists.    The expression  B + myentry(3,"X") or  B /cup [myentry(3,"X")] will not redefine the entry in B.  
 The general rule is that for a binary operation on sets  the representation of on the left is used in the result -- not the one on the right.
   
Module testdict

use standard 

use seq.myentry

use listset.myentry

  type myentry is key:int, data:seq.word

  function =(a:myentry, b:myentry)boolean key.a = key.b

  function lookup(a:listset.myentry , i:int)seq.myentry lookup(a, myentry(i,""))

function print(a:listset.myentry)seq.word
 for txt ="", ele ∈ toseq.a do
  txt + "(" + toword.key.ele + "," + data.ele
  + "),"
 /for(txt >> 1)
 

 
Function test8 seq.word let dict = tolistset.[ myentry(1,"add"), myentry(2,"sub"), myentry(3,"mult")]
let dict2 = tolistset.[ myentry(2,"subtract"), myentry(4,"divide")]
let l1 = lookup(dict, 4)
if print.dict = "(3, mult),(2, sub),(1, add)"
 ∧ print.dict2 = "(4, divide),(2, subtract)"
 ∧ isempty.lookup(dict, 4)
 ∧ data.lookup(dict, 2)_1 = "sub"
 ∧ print(dict2 ∪ dict)
 = "(1, add),(3, mult),(4, divide),(2, subtract)"then
 "PASS testdict"
 else"FAIL testdict" 



For the type listset.word, the unbound function = in the listset module is bound to the function =(word,word) in the standard module
For the type listset.mytype, then unbound = is bound to =(a:myentry, b:myentry)boolean


/< /section Order of evaluation />

The arguments of a function are evaluate from left to right before the function is called.

Not all arguments need to be evaluated. Consider  i > 0 ∧ 300 / i < 10 where ∧ is defined as:

/keyword function ∧(a:boolean, b:boolean)boolean /keyword if a /keyword then b /keyword else false

 

The compiler will do inline expansion and the above expression becomes /< block if i > 0 then 300 / i < 10 else false />  If i=0 then the expression   300 / i < 10 is never evaluated.

This behavior is required for the ∧ operator on booleans.

/< /section Bindings />

Consider the following example code:

Module B

Function TWO int 2

Module A

use B

use standard

Function f1(p1:int)int 
  let l1 = p1 * TWO 
   p1 * l1 - THREE

function THREE int 3

Parameters implicitly declare an access function. Example: /keyword function p1 int 

Parameters are only visible in the expression that defines the body. Example: p1 is only visible in the body of f1.


Names of functions are visible within the module. Example: THREE is visible in f1

Functions from another module B are visible in module A, if they are declared using /keyword Function 
rather than /keyword function or they are exported and the module A includes a  paragraph /keyword use B.  Example: the function TWO is visible in  module A and B.

An word of all digits implicitly declares an access function: /keyword function 3 int 

Let definitions are only visible within the second expression in the let statement. 
Let definitions declare an access function: /keyword function l1 <the type of the first expression of the let>. The definition itself returns the type of the second expression.

A function call f1(<exp1>, <exp2>,...)must match exactly one visible function defintion in name, number of parameters and types of the expressions of the arguments.

The type of the expression that defines a function much match the return type of the function.



/< /section Encodings />

A type can be mapped to positive integers in an encoding. As an example consider implementing a cache that stores the factors of an integer.

The parameterized module /em encoding.T  defines the following functions for working with encodings. 

   Export encode(T)encoding.T { will return the encoding } 

  Export   decode(encoding.T)T { will return the value that was encoded } 

  Export Function findencode(t:T, erecord.T)seq.T { will return the empty sequence if the value has not been mapped or a sequence of containing the value that was mapped.}

  Export  Function encodingdata:T seq.T { list of values that have been encoded.} 

 Module encodingExample 

use standard

We need a type to encode:

type factors is key:int, factors:seq.int

We must define a hash function and = function of the type.

  function hash(a:factors)int key.a

 function =(a:factors, b:factors)boolean key.a = key.b

Note that for a and b of the type factor ; a = b implies hash(a)= hash(b). This must be true for the hash to work correctly.
  
To use factors as an  encoding we must include:

use encoding.factors



The following two function are used to calculate the factors of an integer

 function factors(n:int)seq.int 
 let a = findencode(factors(n, empty:seq.int) )
 if isempty.a then 
   let result=factors(n, 2)
   let discard=encode.factors(n,result)
   result
 else factors.a_1

  function factors(n:int, i:int)seq.int 
  if 2 * i > n 
  then [ n]
  else  if n mod i = 0   then [ i]+ factors(n / i, i)else factors(n, i + 1)


use seq.factors

Function print(s:seq.int) seq.word 
 for  txt="",i /in  s do txt+toword.i /for(txt)

Function test  seq.word
  { the next statment gets the factors of 120 and will create an encoding}
   let firstresult=factors(120)
   { calling factors(120) again will use the cached value rather than recalculating  the factors.}
   let secondresult=factors(120)
   { convert interger 120 into encoding.factors }
   let encoding120=to:encoding.factors(120)
   {now decode and access the factors.}
   let  thirdresult= factors.decode(encoding120)
   if   print.firstresult=" 2 2 2 3 5"
   /and firstresult=secondresult /and secondresult=thirdresult
   then "PASS" else "FAIL"

Consider the sequence of calls, C, in the execution of the program to the function encode. Let S be the sequence of T where S_i is the value passed as parameter in call C_i Let E be the sequence of results where E_i = the result of call C_i.

Then /< block S_i = S_j if and only if encoding(E_i)= encoding(E_j)/> and /< block decode(E_i)is identical to S_j where j = min t where S_t = E_i /> and /< encoding(E_i)> 0 />

Since the mapping  can be shared by multiple process, modification of  the mapping is a critical section. Also the mapping may contain values not assigned by the current process.

/< /section Process statement />

Process are included in Tau for three reasons.

Using multiple processes on multi-core processors can be used to obtain results faster.

Process allow temporary space used to calculate the result to be reclaimed. This is the only way for heap space to be reclaimed in Tau.

Process allow abnormal events to be captured and reported. The following code snippet show how to capture an abnormal event.

Module testprocess

use process.int

  function myprocess(a:int)int 
   assert a > 0   report "invalid"
   3^a

  function useprocess(i:int)int 
  let a = process.myprocess.i 
  if aborted.a 
    then  assert message.a ="invalid"   report "new message"
   0 
  else result.a

In the use clause, the type int matches the return type of myprocess. The process function takes a expressing of the form <funcname>(<arg list>)evaluates the arguments and then spawns a process to execute the function returning a result of type process that refers to the spawned process.

The follow function interact with the spawned process and blocks to wait for the spawned process to finish.

  function aborted(process.T ) boolean { true if the process was aborted as with an assert statement } stub

  function message(process.T ) seq.word  { message return when process was aborted } stub

  function result(process.T) T { result return upon successful completion. }  stub

The spawning process cannot terminate until all of it child process complete, because it may have allocated space and passed it to a child process as a parameter. 


/< /section Sequences />

We use the example of myseq which is a start on a user defined sequence to decode UTF8 sequnece of bytes. The length of the sequence is the number of characters. The i'th element of the sequence with be the i'th character in the encoding.

  Module myseq.T 

All sequences must be in a parameterized Module.

  use standard

  use seq(T)

 type myseq is sequence , data:seq.T

Mytype is recognized as a sequence as the first element of the sequence is sequence.

A function /em length (myseq) is implicitly defined to access the length of myseq

As with any parameterized module  a type definition   must contain an element that uses T so that multiple instances of the module does not produce duplicate symbols.

We need some operations on T. T will be an int in this example so all these operations are define on int in the stdlib.

  unbound >(T, int)boolean  

  unbound <(T, int)boolean  

  unbound-(T, int)T  

 unbound *(T, int)T  

  unbound +(T, T)T 

We need to helper functions to calculate the length and find the ith element of the seq for this example.

/keyword Function clength(s:seq.T, i:int)int 
/br /keyword  if i > length.s 
/br /keyword  then 0 
/br /keyword  else /keyword assert s_i > 0 /keyword report"invalid"
/br  /keyword if s_i < 128 
 /br /keyword then 1 + clength(s, i + 1)
/br  /keyword else /keyword assert s_i < 128 + 64 + 32 /keyword report"invalid"
  1 + clength(s, i + 2)

/keyword Function cindex(s:seq.T, i:int, idx:int)T 
/br /keyword  if idx = 1 
/br /keyword  /keyword then if s_i < 128 /keyword then s_i else s_(i + 1) - 128 +(s_i - 128 - 64)* 64 
/br /keyword  /keyword else cindex(s, i + if s_i < 128 /keyword then 1 else 2, idx - 1)

We need a constructor of our sequence. Note the use of a toseq function. This is defined implicitly by the sequence type definition to change the type from myseq(T)to seq(T).

/keyword Function myseq(d:seq.T)seq.T toseq.myseq(clength(d, 1), d)

Every sequence must have a_function defined on it which is below for mseq.T

/keyword Function_(a:myseq.T, idx:int)T cindex(data.a, 1, idx)

/keyword module testmyseq

/keyword use standard

/keyword use UTF8

/keyword use myseq.int

/keyword Function testmyseq seq.word 
 /br keyword  let s = UTF8.[ 40, 50]+ UTF8.335 + UTF8.50 + UTF8.336 
 /br @(+, toword,"", myseq(toseqbyte.s @ +(empty:seq.int,toint.@e) ))

/< /section Tail Recursion />

A function is tail recursive if the last function called is itself. A compiler can take advantage of this and reuse the activation record on the call stack resulting in less space taken up by the stack during execution.

Sometimes a recursive function can be rewritten to make it tail recursive. Consider the following function:

 use seq.int

  function reverse2(l:seq.int)seq.int 
  if isempty.l    then l   else reverse2.subseq(l, 2, length.l)+ l_1

The last call in this function is to +. Here is a rewritten version that is tail recursive:

  function reverse3(l:seq.int, accumalator:seq.int)seq.int 
 if isempty.l then accumalator   else reverse3(subseq(l, 2, length.l), accumalator + l_1)

  function reverse3(l:seq.int)seq.int reverse3(l, empty:seq.int)

Now reverse3 is the last function called.

Making the function tail recursive is not the only way to reduce the stack size. The follow version uses O(ln n) instead of O(n) where n is the length of the sequence.

  function reverse4(l:seq.int)seq.int 
 if length.l < 2  then l   else reverse4.subseq(l, length.l / 2 + 1, length.l)+ reverse4.subseq(l, 1, length.l / 2)

Perhaps the best way to reverse a sequence is to use

  Function reverse5(s:seq.T)seq.T    for acc=empty:seq.T,e ∈ s   do [s]+acc /for(acc)


In this case the tau compiler will remove the recursion and the bounds checking when indexing the sequence.  
If the sequence was built up out of smaller sequences, it may also  break the sequence into the smaller parts and process them separately. 


/< /section markup />

/< table 
/row Example /cell with format /cell note
/row first /keyword /p second  /cell    first /p second  /cell paragraph break
/row first /keyword  /br second  /cell  first /br second /cell line break
/row /keyword /em example /cell /em example  /cell
/row /keyword /strong example /cell /strong example  /cell
/row /keyword /keyword example /cell /keyword example  /cell
/row /keyword /&lt; /keyword literal this is an example  /keyword /> /cell /< literal  this is an example />  /cell
/row /keyword /&lt; /keyword keyword this is an example  /keyword />  /cell /< keyword this is an example  />  /cell
/row /keyword /&lt; /keyword comment this is an example  /keyword />; /cell /< comment this is an example  />  /cell
/row parent block /keyword /&lt; /keyword block Indented block. /keyword  /br second line /keyword /> 
/cell parent block /< block Indented block. /br second line /> 
/cell   Indented block 
/row /keyword /&lt; /keyword noformat <hr/> /keyword /&lt; /cell  /< noformat <hr/> />  /cell 
/row /keyword /&lt; /keyword table <caption> <rows of table> /keyword /&lt; /cell /cell Defines a table 
/row  /keyword /row../keyword /cell../keyword /cell..  /cell /cell Defines a row of with three columns. 
/br Must be placed within table. 
/row /keyword /&lt; /keyword table    Sample   Table 
/br /keyword /row   1 /keyword /cell 2 /keyword /cell 3
/br /keyword /row   3 /keyword /cell 4 /keyword /cell 5
/keyword /&lt;
/cell
/< table    Sample  Table 
 /row   1 /cell 2 /cell  3 
 /row   3 /cell 4 /cell 5  
  />
/cell
/> 

END

