/tag <h1> The Tau Enviorment  /tag </h1>

/strong x. k

/tag <h2> Installing Tau   /tag </h2>

Make sure clang is installed.   For Mac OS Clang is available if the command line tools are installed.

Down load the zip file from GitHub  (Repository is dwsandberg/Tau)

Unzip to a directory   which we will call <Tau>.  This directory will become the working directory for tau.    You are free to choose another name.  

Modify < PATH > environment variable to include absolute path to <Tau>/bin. 

Open terminal and change directory to <Tau>.

Run "bash bin/taubuild.sh release.bld".  This is likely to generate a warning message about the llvm spec. 


/tag <h2> HelloWorld /tag </h2>

Here are the basics for creating a program the prints /sp " /tag Hello World!".

Make sure you are in the <Tau> directory. First create a sub-directory
of the <Tau> directory and name it /em hello. The hello directory will contain the parts of the program.

In the hello directory create a text file name text.ls containing the following five lines two of which are blank:
<* block
Module hello
/br
/br use standard
/br
/br Function hello seq.word {COMMAND} /sp " /tag Hello World!" 
*>
This is the source for the program. By convention the name of Module is the same
as the name of the file. 

Next create a file name hello.bld with the following lines:
<* block
define makelib taubc  makebitcode
/br 
/br makelib taubc.libinfo + hello  hello.ls 
/br output:hello.lib
/br 
/br define hello  hello  
/br 
/br hello  output: hello.html
/br
/br define open shell open    input:
/br 
/br open input: hello.html output: hello.txt
*> This file tells how to build and run the program.  

Now run the follow command in the <Tau> directory
<* block 
bash taubuild.sh hello/hello.bld 
*>
  

Running the above command does the following <* block
/br 1. Create an executable with the name of <Tau>/built/hello.lib from the source code.
(Paragraphs one and two of the build file.)
/br 2. The program is executed and the output is placed in <Tau>/built/hello.html.  
 (Paragraphs three and four  of the build file.)
/br 3. A web browser  is opened on  the file <Tau>/built/hello.html.
 (Last two paragraph of the build file.)
/br 4. An tar archive of the source files  is created in 
the directory ~/taubackups/hello/.  (An archive is created on successful completion of the build file.)
*>

With   additional steps typing hello at the command prompt will run the program.
One of the commands need to do this is buildhelp which is supplied in the release.  To gain access to all the commands in the release, type: <* block source built/taucommands.sh *>

Now type 
<* block buildhelp hello.libsrc shellscript: *>
which will bring up a shell function definition for hello in a web browser.
Copy this command and run as a shell command. 
Now typing /em hello at the command prompt will run the program.
 
/tag <h2> Commands /tag </h2>


The following assumes that "source built/taucommands.sh" has been executed in the command shell. 

In langauges such as C a function main provides the single entry point into a program. In Tau there can be many entry points and are specified by including the word /em COMMAND
in a comment of a function that meets the following conditions:
<* block 
  Is a  valid function 
 /br Define with Function
 /br Has parameter types of seq.word ,seq.file, or boolean. 
 /br Has a return type of seq.word or seq.file.
 /br the word COMMAND is in comment immediately following the return type.
*>

/tag <h3> Command Syntax /tag </h3>
 
Tau documentation of the commands provided in the release is given by  the
command tau?.  This command was defined with 
<* block Function tau? /tag (cmd:seq.word, %:seq.word) seq.word
{COMMAND ... } ... *>
Removing from the definition the paraenthesis and commas, and 
replacing the types of the arguments actual values will give the   syntax for calling the function on the command line.
<* block tau?   cmd: %:full  *>
 Run the command gives   /tag <a /sp href ="../documentation/cmddoc.html" > this result /tag </a> /sp

The order the parameters are specified does not matter. An omitted parameter of type
seq.word is given an empty value. So the following will all give the same result: 
<* block /br tau?   cmd: %:full   
  /br tau?   %:full cmd: 
  /br tau?  %:full  *>

If a value is supplied for cmd, only documentation for that command is given. 
   Since cmd is both the the first argument  given and the first argumentin the defining procedure  ,  the cmd can be omitted. Hence the following will give the same result:
<* block 
tau? cmd: usegraph %: full 
/br tau? usegraph %: full 
*>

 For parameters of boolean type the value is false if the parameter is omitted or if the value  /em false.  Any other value for a boolean parameter
 is interpreted as /em true.  
 
Parameters of type seq.file  also are replaced with a string.
The string   is processed as filenames and the file from the filing system is fetched.
Multiple formats are allowed for file names.  
 <* block  directory/file1.ls directory/file2.ls directory/file3.ls  *>
The directory does not need to be specified  for every file:
<* block  + directory file1.ls file2.ls file3.ls *>
The file extension also does not need to be repeated:
<* block  + directory file1.ls file2  file3  *>
The file extension can be before the first file:
<* block  + directory.ls file1  file2  file3  *>
All the above forms are specifiy the same files. If There is   no directory use:
<* block  +.ls file1  file2  file3  *>
The following three string all represent the same file
<* block  directory/directory/file1.ls 
/br +directory directory/file1.ls
/br +directory/directory file1.ls *>

Below is documentation for commands in the Tau release.  


/tag <h2> taubuild.sh  /tag </h2>

  The /em taubuild  determines how to build a program from the instructions in /sp .bld files. 
  The /sp .bld file contains commands.  Every command relates a set of input files to output files.
The input files must be distinct from the output files. 

The first output   forms a node in a graph. Additional output files are predecessors
and input files are successors.  The command is define in some library file. This library file is also a successor. 

This forms a DAG.   All the source files can be construct one by one starting with the sources of the graph and working toward the sinks. Thus a bash script is constructed that will build all the output files.  This bash script also contains a list of shasum of the sources
in the DAG.  The script used in the last successful run of the build is retained.  By comparing this shasum  between the current shasums with the previous shasums the files that need to be
rebuilt can be determined.

The last successful run of the hello.bld will produce a file <Tau>/built/build_helloold.sh. 
A new bash script is created named <Tau>/built/build_hello.sh.
This file contains shasum of all the source files used to build the program. The
new script is run.  If there are no errors the build_hello.sh file is renamed to build_helloold.sh and a tar archive is created. 


 The .bld file is  sequence of paragraphs of words. 

The first word of the paragraph is a command.
There are two predefined commands: #, define.
The # command treats the paragraph as a comment.

The define introduces a user defined command.  The second word in the paragraph is the name of the command. The third word is the name of the executable where the command is defined  and
the fourth word is the name of the command in the executable.  The command to reference
the command to invoke the Tau complier that produces an executable would be
<* block define makelib  taubc makebitcode *>  

The definition of user defined command must occur before it's use.  The paragraphs can be reorder as long as   this constraint is maintained. 


An alternate form for the makelib command in the hello.bld file is 
 <* block
makelib   output: +built hello.lib input: +built taubc.libinfo +hello hello.ls
*>
The order of paramters does not matter so this command is equivalent:
 <* block
makelib  input: +built taubc.libinfo +hello hello.ls output: +built hello.lib
*>
If input: follows the command it can be omitted.  A "+built" is always
added to the input and output so it can also be omitted to get
<* block
makelib tau.libinfo +hello hello.ls output: hello.lib
*>

if /em shell is the third word of a define the remainder of the paragraph will be included as a command in the  bash script with the input: and output: replaced by the corresponding file names specified in the use of the file.  For example, the lines from the hello.bld file
<* block
 define open shell open    input:
/br 
/br open input: hello.html output: hello.txt
*>
will produce the bash script line
<* block
   open   hello.html 
*>
