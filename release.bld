
comment this is a comment.  Blank lines divide this file into paragraphs. If paragraph begins with a comment then the paragraph is ignored.  The first word of a paragraph is a command. 

comment Paragraphs that begin with "define" declares commands.  The next word is the name of the command.  The second word is the library the command is defined in. If a third word is present that is the name of the command in the library. Otherwise the command name in the library is the first word. Multiple commands can be defined in the same library.  The command cannot be used before it is defined

comment Commands are followed by a  list of file paths followed by a list of options.   An option starts with the name followed by = and runs to the next option or end of paragraph.
For example consider "mycmd file.lib built/file.ls  opt1=this is a test op2=" which has a file list of "file.lib built/file.ls ", opt1 with a value "this is a test op2" and opt2 whose value is empty.  If an option is not listed it has an value of empty but the command may give it a default value. 
   
comment A list of file paths can be abbreviated.    "built/core.libdesc core/bits.ls core/set.ls stdlib/ptr/bb.txt stdlib/test.html" will be an example.
  The default directory path is "built" so "built/" can be dropped from the core.libdesc.
    "+core" sets the directory path for files until it is set again.  This gives
    "core.libdesc +core bits.ls  set.ls + stdlib ptr/bb.txt  test.html"
    
comment The file extension can alse be abbreviated. Specifying an extension     ".ls" sets the file extension on the previous file and following files without an extension. This we get  "  core.libdesc +core bits.ls set +stdlib ptr bb.txt .html test".  Note that .html does not set the extension on bb.txt sense the proceeding .txt is an extension and not a file. 

comment The order the commands are listed may not be the order the commands are executed.
Each command has a target  of the first file in the file list.
Each  command has a source list of the remaining files in the file list and the library that is specified in the definition of the command.  All the source files must exists before the command is executed to create the target file. 

define doclibrary tools
define transform tools
define usegraph tools
define front tools
define LR1 tools
define lextable tools
define testall testall
define wasm webassembly
define libsrc stdlib
define libsrc0 orgstdlib libsrc
define makelib stdlib makelib
define makelib1 stdlib1 makelib
define makelib2 stdlib2 makelib
define makelib0 orgstdlib makelib
define prettybuild stdlib prettystate
define start shell  startfresh 
define noop shell #

start start.ls
+bin taubuild.sh stdlib.bc putfile.c
+ stdlib tau.c tauthreads.c tau.h



noop compilerfront.libsrc stdlib1.lib

noop core.libsrc stdlib1.lib

noop symbols.libsrc stdlib1.lib

noop tausupport.libsrc stdlib1.lib

noop codegen.libsrc  stdlib1.lib

makelib0 stdlib1.lib 
+stdlib updatestate.ls main2 stdlib.ls
+core lib.ls bits.ls encoding format graph process real seq set sparseseq stack standard UTF8 words xxhash otherseq textio file ptr indirect
+symbols lib.ls symbol2.ls typedict mytype symbolconstant symbol
+compilerfront lib.ls   
+compilerfront compilerfrontT.ls compilerfront  pass2 
hashset localmap2 passparse passsymbol postbind symboldict 
compileTimeT object01 objectio LEBencoding addprofile 
 makeentry PEG.ls PEGrules PEGmachine newPretty prettyAttribute functionHeader
 symbolMode  
  parser
 backparse
 newanal
+codegen lib.ls persistant.ls bitstream codetemplates2 codegennew codetemplates internalbc llvm llvmcode
+tausupport lib.ls   taublockseq bitcast tausupport encodingsupport
+built    start.ls
exports= / stdlib

makelib1 stdlib2.lib 
+stdlib updatestate.ls main2  stdlib.ls
+built core.libsrc symbols compilerfront codegen tausupport
exports= / stdlib

makelib2 stdlib.lib 
+stdlib updatestate.ls main2  stdlib.ls
+built core.libsrc symbols  codegen tausupport compilerfront
exports= / stdlib
  info= profile=

noop subtools.libsrc  tools.lib

makelib tools.lib 
+tools   tools.ls  
+subtools lib.ls baseTypeCheck.ls doc   
prettycompilerfront reconstructUses   frontcmd  
+subtools graphcode   cleanExports genPEG
  genEnumeration 
   totext 
+built common.lib 
uses=common stdlib
  info=profile=

makelib common.lib
+common common.ls matrix point bandeskopf uniqueids svg2graph makeDAG layergraph 
commontests barycenter timestamp wordgraph
uses=stdlib
exports= / common

makelib testall.lib
+tests lib.ls bug7.ls checking myseq testPoint randomphrase test11 
test20 testencoding testmodules testprocess testseq tree wordfreq 
testopt test11a testall seq8  testpackedseq
uses=stdlib
 
makelib webassembly.lib
+webassembly webassembly.ls funcidx knownWfunc printfunc wasm wasm2 wasmcompile
uses=stdlib

libsrc webcore.libsrc core.libsrc tausupport
+webassembly template.js
+webcore webIOtypes.ls webIO SpecialExports JS webHTTP SpecialImports
+null lib
+common   barycenter layergraph makeDAG bandeskopf


doclibrary
+documentation stdlibdoc.html
+$build stdlib.libsrc

doclibrary
+documentation commondoc.html
+$build common.libsrc

transform
+documentation taudoc.html
+tools doc.ls
html= noindex=

transform
+documentation installdoc.html
+tools install.txt
html= noindex=

usegraph
+documentation install1.html
+$build core.libsrc

usegraph
+documentation install2.html
+$build core.libsrc
exclude = seq standard

usegraph
+documentation install3.html
+$build core.libsrc
include = UTF8 words standard textio xxhash
exclude = seq standard

transform +documentation install4.html +tests enumexample.ls html= noindex=

doclibrary
+documentation subtools.html
+subtools  frontcmd.ls doc.ls  

transform
+documentation profileExampleSrc.html
+tests profileExample.ls  
 html= noindex=


 testall testall.html
+tests opttests.ls
+$build stdlib.libinfo

 front baseTypeCheck.html stdlib.libsrc
out=baseTypeCheck

comment front callgraphwithin.html tools.libsrc stdlib.libinfo common.libinfo
mods=genPEG
within=

wasm wbeizer.wasm webcore.libsrc symbols.libsrc 
+ webcore webProfileSupport.ls
+ tests profile
   +compilerfront object01.ls objectio LEBencoding
   +subtools graphcode 
   +common svg2graph uniqueids 
+webapps Bcubic.html Bquadratic wbeizer.ls
exports=wbeizer 
Library=wbeizer
 info=  profile=


define cmd2html cmd2html

 makelib cmd2html.lib stdlib.libinfo +webapps lib.ls cmd2html.ls 
 +null lib +compilerfront    makeentry
uses= stdlib

cmd2html  runcmdcreateinfo.html  +subtools doc.ls frontcmd.ls   
  libname=runcmd 
  
  noop   runcmd.html runcmdcreateinfo.html

noop   runcmd.ls runcmdcreateinfo.html

wasm runcmd.wasm webcore.libsrc  symbols compilerfront 
+common svg2graph.ls uniqueids wordgraph.ls
+built runcmd.html runcmd.ls 
+subtools doc.ls       graphcode
 frontcmd  baseTypeCheck  prettycompilerfront reconstructUses cleanExports genPEG  genEnumeration
totext  + tests profile.ls
+ webapps webtools2 
+ tests profileExample.ls
exports=runcmd
Library=runcmd
info=

prettybuild newrelease.bld
+.bld release.bld


makelib profileExample.lib common.lib 
 +tests lib.ls profileExample.ls  profile
 +subtools graphcode
uses=common stdlib
 profile= info=
 
 define profileExample profileExample profileExample

 
 profileExample +documentation profileExample.html 


makelib printbitcodes.lib  stdlib.lib 
+printbitcodes printbitcodes.ls bitcodesupport.ls slotdesc llvm2
runcode
uses=stdlib

define printbitcodes printbitcodes printbitcodes
define regen ppp test2

noop profileExample.bc
+$build profileExample.lib

 printbitcodes ppp.ls profileExample.bc bitcode= 

  makelib ppp.lib  ppp.ls
+printbitcodes runcode bitcodesupport 
uses = stdlib
options = bitcode

  regen  regen.bc 

 
comment transform hhh.html core.libsrc bind=
 
transform  transform1info.html +built  stdlib.libsrc  common  tools   webassembly testall printbitcodes 

