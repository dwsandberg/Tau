
comment this is a comment.  Blank lines divide this file into paragraphs. If paragraph begins with a comment then the paragraph is ignored.  The first word of a paragraph is a command. 

comment Paragraphs that begin with "define" declares commands.  The next word is the name of the command.  The second word is the library the command is defined in. If a third word is present that is the name of the command in the library. Otherwise the command name in the library is the first word. Multiple commands can be defined in the same library.  The command cannot be used before it is defined

comment Commands are followed by a  list of file paths followed by a list of options.   An option starts with the name followed by = and runs to the next option or end of paragraph.
For example consider "mycmd file.lib built/file.ls  opt1=this is a test op2=" which has a file list of "file.lib built/file.ls ", opt1 with a value "this is a test op2" and opt2 whose value is empty.  If an option is not listed it has an value of empty but the command may give it a default value. 
   
comment A list of file paths can be abbreviated.    "built/core.libdesc core/bits.ls core/set.ls stdlib/ptr/bb.txt stdlib/test.html" will be an example.
  The default directory path is "built" so "built/" can be dropped from the core.libdesc.
    "+core" sets the directory path for files until it is set again.  This gives
    "core.libdesc +core bits.ls  set.ls + stdlib ptr/bb.txt  test.html"
    
comment The file extension can alse be abbreviated. Specifying an extension     ".ls" sets the file extension on the previous file and following files without an extension. This we get  "  core.libdesc +core bits.ls set +stdlib ptr bb.txt .html test".  Note that .html does not set the extension on bb.txt sense the proceeding .txt is an extension and not a file. 

comment The order the commands are listed may not be the order the commands are executed.
Each command has a target  of the first file in the file list.
Each  command has a source list of the remaining files in the file list and the library that is specified in the definition of the command.  All the source files must exists before the command is executed to create the target file. 

define doclibrary tools
define enumerate tools
define transform tools
define usegraph tools
define front tools
define LR1 tools
define lextable tools
define testall tests
define wasm webassembly
define libsrc stdlib
define libsrc0 orgstdlib libsrc
define makelib stdlib makelib
define makelib1 stdlib1 makelib
define makelib2 stdlib2 makelib
define makelib0 orgstdlib makelib
define prettybuild stdlib prettystate
define shell backup

libsrc0 core.libsrc
+core bits.ls encoding format graph process real seq set sparseseq stack standard UTF8 words xxhash otherseq
+stdlib textio file 

libsrc0 symbols.libsrc
+stdlib symbol2.ls typedict mytype symbolconstant symbol

libsrc0 compilerfront.libsrc
+stdlib pretty.ls compilerfrontT.ls compilerfront mergeblocks pass2 hashset localmap2 parse parsersupport passparse passsymbol postbind symboldict

libsrc0 codegen.libsrc
+stdlib persistant.ls bitstream codetemplates2 codegennew codetemplates internalbc llvm llvmconstants

libsrc0 bcsupportdebug.libsrc
+stdlib impdependent.ls ptr taublockseq bitcast tausupport 

makelib0 stdlib1.lib core.libsrc symbols compilerfront codegen bcsupportdebug
+stdlib updatestate.ls main2 compileTimeT object01 objectio LEBencoding
exports=midpoint   impDependent mytype UTF8  bits   ptr encoding file format graph hashset internalbc  llvm llvmconstants main2 maindict mangle otherseq pretty process real seq set sparseseq stack standard symbol symbol2 taublockseq tausupport testall textio timestamp words xxhash compilerfront bitcast objectio object01 LEBencoding

makelib1 stdlib2.lib core.libsrc symbols compilerfront codegen bcsupportdebug
+stdlib updatestate.ls main2 compileTimeT object01 objectio LEBencoding
exports=midpoint  impDependent mytype UTF8  bits  ptr encoding file format graph hashset internalbc  llvm llvmconstants main2 maindict mangle otherseq pretty process real seq set sparseseq stack standard symbol symbol2 taublockseq tausupport testall textio timestamp words xxhash compilerfront bitcast objectio object01 LEBencoding

makelib2 stdlib.lib core.libsrc symbols compilerfront codegen bcsupportdebug
+stdlib updatestate.ls main2 compileTimeT object01 objectio LEBencoding
exports=libllvm compilerfrontT midpoint  impDependent mytype UTF8  bits    encoding file format graph hashset internalbc  llvm llvmconstants main2 maindict mangle otherseq pretty process real seq set sparseseq stack standard symbol symbol2 taublockseq tausupport testall textio words xxhash compilerfront bitcast objectio object01 LEBencoding

libsrc subtools.libsrc +tools baseTypeCheck.ls doc genLR1 prettycompilerfront reconstructUses   taulextable frontcmd wordgraph enumerate
graphcode ParserExample 

makelib tools.lib common.lib subtools.libsrc
+tools  profile.ls  profileexample
uses=common stdlib
exports=baseTypeCheck doc genLR1 profile taulextable tools uniqueids wordgraph

makelib common.lib
+common common.ls matrix point bandeskopf uniqueids svg2graph makeDAG layergraph barycenter
uses=stdlib
exports=matrix point bandeskopf uniqueids svg2graph makeDAG layergraph barycenter common

makelib tests.lib
+tests bug7.ls checking myseq point randomphrase test11 test20 testencoding testmodules testprocess testseq tree wordfreq testopt.
 ls test11a testall
uses=stdlib
exports=tests

makelib webassembly.lib
+webassembly webassembly.ls funcidx knownWfunc printfunc wasm wasm2 wasmcompile
uses=stdlib
exports=wasm wasm1 wasm2 wasmcompile webassembly

libsrc webcore.libsrc core.libsrc
+webcore impDependent.ls webIO SpecialExports
SpecialImports
+common barycenter layergraph makeDAG bandeskopf
+stdlib tausupport bitcast taublockseq ptr

doclibrary stdlibdoc.html stdlib.libsrc

doclibrary commondoc.html common.libsrc

transform taudoc.html  
+tools doc.txt flags=html noindex

transform installdoc.html 
+tools install.txt flags=html noindex

 usegraph + tools install1.html +$build core.libsrc 

usegraph + tools install2.html +$build core.libsrc exclude=seq standard    

usegraph + tools install3.html +$build core.libsrc include=UTF8 words format standard textio stack encoding xxhash exclude=seq standard  

enumerate +tools install4.html  enumexample.ls

LR1 taugrammer.html
+stdlib parse.ls

lextable taulex.html
+tools install.txt

testall testall.html
+tests opttests.ls
+$build stdlib.libinfo

front baseTypeCheck.html stdlib.libsrc
out=baseTypeCheck

front callgraphwithin.html tools.libsrc stdlib.libinfo common.
 libinfo
mods=taulextable
flags=within

wasm wbeizer.wasm webcore.libsrc
+wbeizer Bcubic.html Bquadratic wbeizer.ls
exports=wbeizer
Library=wbeizer

wasm webtools.wasm webcore.libsrc symbols compilerfront  tests subtools
+webtools webtools.ls  webtools.html
+common svg2graph.ls uniqueids
+stdlib hashset symbol2 pretty symbolconstant compileTimeT  objectio object01 LEBencoding
exports=webtools
Library=webtools

 prettybuild newrelease.bld +.bld  release.bld

define updatestate stdlib updatestate

 updatestate newupdate.sh +.bld release.bld
