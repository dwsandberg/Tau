#!/usr/local/bin/tau

module tauparser

run tauparser test2

use libdesc

use libscope

use passcommon

use process.tree.word

use profile

use seq.int

use seq.lexaction

use seq.moddesc

use seq.seq.word

use seq.stack.stkele

use seq.stepresult

use seq.stkele

use seq.tree.word

use set.word

use stack.stkele

use stdlib



use tree.word

Function test2 seq.word X."stdlib"+ profileresults."time"


 Function test3 seq.word
  let l ="Function empty:seq.seq.word export" // "function checkpretty(libheader:seq.seq.word, mod:moddesc)boolean 
     let x = checkpretty(src(mod), 1, empty:set.seq.word, empty:seq.seq.word, empty:seq.seq.word) 
     let z = createfile([ merge([ libname(mod)]+ &quot / &quot + [ modname(mod)]+ &quot .ls &quot )], if modname(mod)= libname(mod)then libheader + x else x )
     true   " //
  print.parse(getheader.l)+":::"+getheader.l 
  
  
   function getheader(s:seq.word) seq.word  if length.s < 3 then s else
      let startoftype = if  s_3="(" _1  then  findindex(")"_1,s,4)+1 else if s_3=":"_1  then 4 else 3
      let afterreturntype  =consumetype( s, startoftype+1 )
      let aftercomments=consumecomment(s,afterreturntype)
       if aftercomments &le length.s &and s_aftercomments in "builtin unbound export" then s else
        assert true report subseq(s,aftercomments,length.s)
     subseq(s,1, aftercomments-1)+"stub"
     
     function consumetype(s:seq.word,i:int) int
       if i > length.s then i
       else if s_i="."_1 then consumetype(s,i+2) else i
    
    function consumecomment(s:seq.word,i:int) int
      if i > length.s then i 
       else if s_i="//"_1 then 
         consumecomment(s,findindex("//"_1,s,4)+1) else i 

function kk(stateno:int,token:int) seq.word      
  if 0 &ne   actiontable_ (length.tokenlist * stateno  + token) then [tokenlist_token] else empty:seq.word
  
function expect(stateno:int) seq.word  let l=@(+,kk.stateno, "",arithseq(length.tokenlist,1,1))
  toseq.(asset.l-asset."-=_^∧ ∨ *")

/function printstate(stateno:int)seq.word [ toword.stateno]


function X(libname:seq.word)seq.word @(+, check,"", modules.tolibdesc(libname_1))

function check(m:moddesc)seq.word @(+, check,"", src.m)

function check(input:seq.word)seq.word 
 PROFILE.if input_1 in"Function function use type"
  then  // let p = process.parse.input if aborted.p then"&br failed"+ input + message.p else let c =(result.p)  //
    let c = parse.input 
   let d = oldway.input 
   if c = d 
   then"&br OK"+ input_2 
   else"&br NEW"+ print.c +"&br OLD"+ print.d 
  else""

function oldway(input:seq.word)tree.word PROFILE.NOINLINE.parse(input, tree("X"_1))

function firstson(t:tree.word)tree.word t_1

function countdigits(s:seq.int, i:int, result:int)word 
 // does not count no-break spaces // 
  if i > length.s 
  then toword.result 
  else countdigits(s, i + 1, result + if s_i = nbspchar then 0 else 1)

type stepresult is record stk:stack.stkele, place:int, input:seq.word, tokenstate:int, string:seq.word

type stkele is record stateno:int, result:tree.word

type lexaction is record w:word, tokenno:int, label:word

function consumeinput(b:stepresult, next:word)stepresult 
// generated by genlex module in tools // 
let Wtoken = 34 
let Itoken = 38 
let commenttoken = 11 
let stringtoken = 23 
if tokenstate.b ≠ 0 then 
if tokenstate.b = stringtoken then 
if next ="&quot"_1 then 
BB(stringtoken, tree("$wordlist"_1, @(+, tree, empty:seq.tree.word, string.b)), stk.b, place.b, input.b) 
else // add to string // 
stepresult(stk.b, place.b + 1, input.b, tokenstate.b, string.b + if next = merge(["&"_1,"quot"_1])then"&quot"_1 else next) 
else if next ="//"_1 then 
BB(commenttoken, tree("comment"_1, @(+, tree, empty:seq.tree.word, string.b)), stk.b, place.b, input.b) 
else // add to string // stepresult(stk.b, place.b + 1, input.b, tokenstate.b, string.b + next) 
else let act = if next ="."_1 then lexaction("."_1, 1,"."_1) 
else if next ="//"_1 then lexaction("//"_1, 0,"//"_1) 
else let x = decode(next) 
[ lexaction("mod"_1, 22,"mod"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("&quot"_1, 0,"&quot"_1) 
, lexaction("G"_1, 34,"G"_1) 
, lexaction("≠"_1, 7,"≠"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("L"_1, 34,"L"_1) 
, lexaction("≥"_1, 7,"≥"_1) 
, lexaction(","_1, 12,","_1) 
, lexaction("empty"_1, 34,"empty"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("comment"_1, 34,"comment"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("{"_1, 8,"{"_1) 
, lexaction("∪"_1, 22,"∪"_1) 
, lexaction("["_1, 14,"["_1) 
, lexaction("assert"_1, 27,"assert"_1) 
, lexaction("Function"_1, 34,"Function"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("@"_1, 29,"@"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("E"_1, 34,"E"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("mytype"_1, 34,"mytype"_1) 
, lexaction("seq"_1, 34,"seq"_1) 
, lexaction("*"_1, 22,"*"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("/"_1, 22,"/"_1) 
, lexaction("T"_1, 34,"T"_1) 
, lexaction("int"_1, 34,"int"_1) 
, lexaction("∨"_1, 18,"∨"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("∈"_1, 2,"∈"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("^"_1, 15,"^"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(">"_1, 7,">"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("use"_1, 34,"use"_1) 
, lexaction("if"_1, 21,"if"_1) 
, lexaction("#"_1, 20,"#"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("("_1, 13,"("_1) 
, lexaction(". "_1, 40,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("-"_1, 2,"-"_1) 
, lexaction("$wordlist"_1, 34,"$wordlist"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("2"_1, 38,"2"_1) 
, lexaction("W"_1, 34,"W"_1) 
, lexaction("is"_1, 3,"is"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("inst"_1, 34,"inst"_1) 
, lexaction("∋"_1, 2,"∋"_1) 
, lexaction("<"_1, 7,"<"_1) 
, lexaction("a"_1, 34,"a"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("A"_1, 34,"A"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(">>"_1, 7,">>"_1) 
, lexaction("F"_1, 34,"F"_1) 
, lexaction("function"_1, 34,"function"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("K"_1, 34,"K"_1) 
, lexaction("≤"_1, 7,"≤"_1) 
, lexaction("+"_1, 2,"+"_1) 
, lexaction("P"_1, 34,"P"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("0"_1, 38,"0"_1) 
, lexaction("then"_1, 24,"then"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("∩"_1, 22,"∩"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("report"_1, 28,"report"_1) 
, lexaction(":"_1, 9,":"_1) 
, lexaction("_"_1, 15,"_"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("?"_1, 7,"?"_1) 
, lexaction("in"_1, 2,"in"_1) 
, lexaction("<<"_1, 7,"<<"_1) 
, lexaction("word"_1, 34,"word"_1) 
, lexaction("i"_1, 34,"i"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("I"_1, 34,"I"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(")"_1, 4,")"_1) 
, lexaction("N"_1, 34,"N"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("let"_1, 26,"let"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("else"_1, 25,"else"_1) 
, lexaction("∧"_1, 17,"∧"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("}"_1, 10,"}"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("]"_1, 5,"]"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("="_1, 6,"="_1) 
, lexaction(". "_1, 0,". "_1)]_(1 +(length.x * 131 + 1999 * x_1 + 164 * last.x)mod 106) 
if w.act ≠ next then BB(if hasdigit.next then Itoken else Wtoken, tree(next), stk.b, place.b, input.b) 
else if tokenno.act = 0 then 
if next ="&quot"_1 then // start word list // stepresult(stk.b, place.b + 1, input.b, stringtoken,"") 
else // start comment // stepresult(stk.b, place.b + 1, input.b, commenttoken,"") 
else BB(tokenno.act, tree.label.act, stk.b, place.b, input.b)

use parse

function BB(token:int, tr:tree.word, stk:stack.stkele,place:int,input:seq.word)stepresult 
   let stateno = stateno.top.stk 
  let actioncode = actiontable_(token + length.tokenlist * stateno)
  if actioncode > 0 
  then stepresult(push(stk, stkele(actioncode, tr)), place + 1, input, 0,"")
  else assert actioncode < 0 report"parse error expect: " +expect.stateno + "got: "+input_ place+printstate.stateno
    + prettynoparse(subseq(input, 1, place), 1, 0,"")
  let x = reduce(stk,-actioncode)
  BB(token, tr,  x, place, input)

Function parse(input:seq.word)tree.word 
 let a = @(consumeinput, identity, stepresult(push(empty:stack.stkele, stkele(startstate, tree("X"_1))), 1,input +"#", 0,""), input +"#")
  result(toseq(stk.a)_2)

function insertson(son:seq.tree.word ,t:tree.word) tree.word  tree(label.t,son+sons.t)


noactions 2104 
nosymbols:39 alphabet:.-is)]= > {:} comment,([_^∧ ∨ T # if * $wordlist then else let assert report @ A E G F W P N L I K 
norules 51 
nostate 131 
follow.>-.> =.> >.> {.> comment.>(.> [.>_.> ∧.> ∨.> T.> if.> *.> $wordlist.> let.> assert.> @.> A.> E.> W.> N.> I->.->--> =-> >-> {-> comment->,->(-> [->_-> ∧-> ∨-> if-> *-> $wordlist-> let-> assert-> @-> A-> E-> W-> N-> I is > W)>-)>))>])> =)> >)> {)> })> comment)>,)>()> [)>_)>^)> ∧)> ∨)> T)> #)> if)> *)> $wordlist)> then)> else)> let)> assert)> report)> @)> A)> E)> W)> N)> I]>-]>)]>]]> =]> >]> {]> }]> comment]>,]>(]> []>_]>^]> ∧]> ∨]> #]> if]> *]> $wordlist]> then]> else]> let]> assert]> report]> @]> A]> E]> W]> N]> I = >.= >-= > = = > > = > { = > comment = >, = >(= > [ = >_= > ∧ = > ∨ = > if = > * = > $wordlist = > let = > assert = > @ = > A = > E = > W = > N = > I > >.> >-> > = > > > > > { > > comment > >, > >(> > [ > >_> > ∧ > > ∨ > > if > > * > > $wordlist > > let > > assert > > @ > > A > > E > > W > > N > > I { >-{ > = { > > { > { { > comment { >({ > [ { >_{ > ∧ { > ∨ { > if { > * { > $wordlist { > let { > assert { > @ { > A { > E { > W { > N { > I:> T:> W } >-} >)} >]} > = } > > } > { } > } } > comment } >, } >(} > [ } >_} >^} > ∧ } > ∨ } > # } > if } > * } > $wordlist } > then } > else } > let } > assert } > report } > @ } > A } > E } > W } > N } > I comment >-comment > = comment > > comment > { comment > comment comment >(comment > [ comment >_comment > ∧ comment > ∨ comment > if comment > * comment > $wordlist comment > let comment > assert comment > @ comment > A comment > E comment > W comment > N comment > I, >-, > =, > >, > {, > comment, >(, > [, >_, > ∧, > ∨, > T, > if, > *, > $wordlist, > let, > assert, > @, > A, > E, > W, > N, > I, > K(>-(> =(> >(> {(> comment(>((> [(>_(> ∧(> ∨(> T(> if(> *(> $wordlist(> let(> assert(> @(> A(> E(> W(> P(> N(> L(> I(> K [ >-[ > = [ > > [ > { [ > comment [ >([ > [ [ >_[ > ∧ [ > ∨ [ > if [ > * [ > $wordlist [ > let [ > assert [ > @ [ > A [ > E [ > W [ > N [ > L [ > I_>._>-_> =_> >_> {_> comment_>,_>(_> [_>__> ∧_> ∨_> if_> *_> $wordlist_> let_> assert_> @_> A_> E_> W_> N_> I^>-^> =^> >^> {^> comment^>(^> [^>_^> ∧^> ∨^> if^> *^> $wordlist^> let^> assert^> @^> A^> E^> W^> N^> I ∧ >.∧ >-∧ > = ∧ > > ∧ > { ∧ > comment ∧ >, ∧ >(∧ > [ ∧ >_∧ > ∧ ∧ > ∨ ∧ > if ∧ > * ∧ > $wordlist ∧ > let ∧ > assert ∧ > @ ∧ > A ∧ > E ∧ > W ∧ > N ∧ > I ∨ >.∨ >-∨ > = ∨ > > ∨ > { ∨ > comment ∨ >, ∨ >(∨ > [ ∨ >_∨ > ∧ ∨ > ∨ ∨ > if ∨ > * ∨ > $wordlist ∨ > let ∨ > assert ∨ > @ ∨ > A ∨ > E ∨ > W ∨ > N ∨ > I T >-T >)T >]T > = T > > T > { T > } T > comment T >, T >(T > [ T >_T >^T > ∧ T > ∨ T > # T > if T > * T > $wordlist T > then T > else T > let T > assert T > report T > @ T > A T > E T > W T > N T > I if >-if > = if > > if > { if > comment if >(if > [ if >_if > ∧ if > ∨ if > if if > * if > $wordlist if > let if > assert if > @ if > A if > E if > W if > N if > I * >.* >-* > = * > > * > { * > comment * >, * >(* > [ * >_* > ∧ * > ∨ * > if * > * * > $wordlist * > let * > assert * > @ * > A * > E * > W * > N * > I $wordlist >-$wordlist >)$wordlist >]$wordlist > = $wordlist > > $wordlist > { $wordlist > } $wordlist > comment $wordlist >, $wordlist >($wordlist > [ $wordlist >_$wordlist >^$wordlist > ∧ $wordlist > ∨ $wordlist > # $wordlist > if $wordlist > * $wordlist > $wordlist $wordlist > then $wordlist > else $wordlist > let $wordlist > assert $wordlist > report $wordlist > @ $wordlist > A $wordlist > E $wordlist > W $wordlist > N $wordlist > I then >-then > = then > > then > { then > comment then >(then > [ then >_then > ∧ then > ∨ then > if then > * then > $wordlist then > let then > assert then > @ then > A then > E then > W then > N then > I else >-else > = else > > else > { else > comment else >(else > [ else >_else > ∧ else > ∨ else > if else > * else > $wordlist else > let else > assert else > @ else > A else > E else > W else > N else > I let > W assert >-assert > = assert > > assert > { assert > comment assert >(assert > [ assert >_assert > ∧ assert > ∨ assert > if assert > * assert > $wordlist assert > let assert > assert assert > @ assert > A assert > E assert > W assert > N assert > I report >-report > = report > > report > { report > comment report >(report > [ report >_report > ∧ report > ∨ report > if report > * report > $wordlist report > let report > assert report > @ report > A report > E report > W report > N report > I @ >(A >-A > = A > > A > { A > comment A >(A > [ A >_A > ∧ A > ∨ A > if A > * A > $wordlist A > let A > assert A > @ A > A A > E A > W A > N A > I E >-E >)E >]E > = E > > E > { E > } E > comment E >, E >(E > [ E >_E >^E > ∧ E > ∨ E > # E > if E > * E > $wordlist E > then E > else E > let E > assert E > report E > @ E > A E > E E > W E > N E > I F > # W >.W >-W > is W >)W >]W > = W > > W > { W >:W > } W > comment W >, W >(W > [ W >_W >^W > ∧ W > ∨ W > T W > # W > if W > * W > $wordlist W > then W > else W > let W > assert W > report W > @ W > A W > E W > W W > P W > N W > I P >)P >, P > # N >.N >, N >(L >)L >]L >, I >.I >-I >)I >]I > = I > > I > { I > } I > comment I >, I >(I > [ I >_I >^I > ∧ I > ∨ I > # I > if I > * I > $wordlist I > then I > else I > let I > assert I > report I > @ I > A I > E I > W I > N I > I K >, 

function tokenlist seq.word".-is)]= > {:} comment,([_^∧ ∨ T # if * $wordlist then else let assert report @ A E G F W P N L I K" 

function startstate int 1 

function actiontable seq.int [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 10, 11, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, -37, 16, -37, -37, -37, -37, -37, 17, -37, -37, -37, 18, -37, -37, -37, -37, -37, 19, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, 0, 20, 0, -37, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 39, 0, 0, 40, 0, 41, 0, 42, 0, 15, -37, 0, -37, -37, -37, -37, -37, 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, 0, -37, 0, -37, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 43, 0, 0, 0, 0, 0, -38, 0, -38, -38, -38, -38, -38, 0, -38, -38, -38, -38, -38, -38, -38, -38, -38, 0, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, 0, 0, -38, 0, -38, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 44, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 45, 0, 0, 40, 0, 41, 0, 42, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, -37, 0, -37, -37, -37, -37, -37, 46, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, 0, -37, 0, -37, 0, -37, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -43, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 49, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 50, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 51, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 52, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 53, 0, 0, 40, 0, 41, 54, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 55, 0, 0, 40, 0, 41, 0, 42, 0, 0, -40, 0, -40, -40, -40, -40, -40, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, 0, 0, -40, 0, -40, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 57, 0, 0, 40, 0, 41, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 59, 0, 0, 40, 0, 41, 0, 42, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, -4, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, -12, 0, -12, -12, -12, -12, -12, 69, -12, -12, -12, 70, -12, -12, -12, -12, -12, 0, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, 0, 0, -12, 0, -12, 0, -12, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, -35, 0, -35, -35, -35, -35, -35, 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, 0, 0, -35, 0, -35, 0, -35, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, -5, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, -20, 0, -20, -20, -20, -20, -20, 0, -20, -20, -20, -20, -20, 63, 64, -20, -20, 0, -20, -20, 67, -20, -20, -20, -20, -20, -20, -20, -20, -20, 0, 0, -20, 0, -20, 0, -20, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 79, 0, 0, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, -41, -41, -41, -41, -41, 0, -41, -41, -41, -41, -41, 63, 64, -41, -41, 0, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, 0, 0, -41, 0, -41, 0, -41, 0, 0, 60, 0, 80, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, -29, -29, 61, 62, 0, 0, 0, 0, -29, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 86, 0, 0, 40, 0, 87, 0, 42, 88, 0, 60, 0, -33, -33, 61, 62, -33, 0, -33, -33, -33, -33, -33, 63, 64, 65, 66, 0, -33, -33, 67, -33, -33, -33, -33, -33, -33, -33, -33, -33, 0, 0, -33, 0, -33, 0, -33, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 89, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 90, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 91, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 92, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 93, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 94, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 95, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 96, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 97, 0, 0, 40, 0, 41, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 53, 0, 0, 40, 0, 41, 99, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 100, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 53, 0, 0, 40, 0, 41, 101, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 104, 0, 0, 40, 0, 41, 0, 42, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, -37, 0, -37, -37, -37, -37, -37, 105, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, 0, -37, 0, -37, 0, -37, 0, 0, -16, 0, -16, -16, -16, -16, -16, 0, -16, -16, -16, -16, -16, -16, -16, -16, -16, 0, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, 0, 0, -16, 0, -16, 0, -16, 0, 0, -15, 0, -15, -15, -15, -15, -15, 0, -15, -15, -15, -15, -15, -15, -15, -15, -15, 0, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, 0, 0, -15, 0, -15, 0, -15, 0, 0, -31, 0, -31, -31, -31, -31, -31, 0, -31, -31, -31, -31, -31, -31, -31, -31, -31, 0, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, 0, 0, -31, 0, -31, 0, -31, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 106, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 107, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 108, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 109, 0, 0, 40, 0, 41, 0, 42, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, -49, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24, -24, -24, -24, -24, 0, -24, -24, -24, -24, -24, 63, 64, -24, -24, 0, -24, -24, 67, -24, -24, -24, -24, -24, -24, -24, -24, -24, 0, 0, -24, 0, -24, 0, -24, 0, 0, 60, 0, -25, -25, -25, -25, -25, 0, -25, -25, -25, -25, -25, 63, 64, -25, -25, 0, -25, -25, 67, -25, -25, -25, -25, -25, -25, -25, -25, -25, 0, 0, -25, 0, -25, 0, -25, 0, 0, 60, 0, -26, -26, -26, -26, -26, 0, -26, -26, -26, -26, -26, 63, 64, -26, -26, 0, -26, -26, 67, -26, -26, -26, -26, -26, -26, -26, -26, -26, 0, 0, -26, 0, -26, 0, -26, 0, 0, -19, 0, -19, -19, -19, -19, -19, 0, -19, -19, -19, -19, -19, -19, 64, -19, -19, 0, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, 0, 0, -19, 0, -19, 0, -19, 0, 0, 60, 0, -18, -18, 61, 62, -18, 0, -18, -18, -18, -18, -18, 63, 64, 65, 66, 0, -18, -18, 67, -18, -18, -18, -18, -18, -18, -18, -18, -18, 0, 0, -18, 0, -18, 0, -18, 0, 0, 60, 0, -27, -27, 61, 62, -27, 0, -27, -27, -27, -27, -27, 63, 64, -27, -27, 0, -27, -27, 67, -27, -27, -27, -27, -27, -27, -27, -27, -27, 0, 0, -27, 0, -27, 0, -27, 0, 0, 60, 0, -28, -28, 61, 62, -28, 0, -28, -28, -28, -28, -28, 63, 64, 65, -28, 0, -28, -28, 67, -28, -28, -28, -28, -28, -28, -28, -28, -28, 0, 0, -28, 0, -28, 0, -28, 0, 0, -23, 0, -23, -23, -23, -23, -23, 0, -23, -23, -23, -23, -23, 63, 64, -23, -23, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, 0, 0, -23, 0, -23, 0, -23, 0, 0, -21, 0, -21, -21, -21, -21, -21, 0, -21, -21, -21, -21, -21, 63, 64, -21, -21, 0, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, 0, 0, -21, 0, -21, 0, -21, 0, 0, -39, 0, -39, -39, -39, -39, -39, 0, -39, -39, -39, -39, -39, -39, -39, -39, -39, 0, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, 0, 0, -39, 0, -39, 0, -39, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, -22, -22, -22, -22, -22, 0, -22, -22, -22, -22, -22, 63, 64, -22, -22, 0, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, 0, 0, -22, 0, -22, 0, -22, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, -36, -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, 0, -36, 0, -36, 0, -36, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 113, 0, 0, 40, 0, 41, 0, 42, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, -2, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 60, 0, -30, -30, 61, 62, 0, 0, 0, 0, -30, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 61, 62, -32, 0, 0, -32, 0, -32, -32, 63, 64, 65, 66, 0, 0, -32, 67, -32, 0, 0, -32, -32, 0, -32, -32, -32, 0, 0, -32, 0, -32, 0, -32, 0, 0, 116, 0, 0, 0, 117, 118, 29, 0, 0, 30, 0, 31, 32, 119, 64, 120, 121, 0, 0, 33, 122, 34, 0, 0, 35, 36, 0, 37, 38, 123, 0, 0, 40, 0, 41, 0, 42, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 86, 0, 0, 40, 0, 87, 0, 42, 124, 0, -14, 0, -14, -14, -14, -14, -14, 0, -14, -14, -14, -14, -14, -14, -14, -14, -14, 0, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, 0, 0, -14, 0, -14, 0, -14, 0, 0, -13, 0, -13, -13, -13, -13, -13, 0, -13, -13, -13, -13, -13, -13, -13, -13, -13, 0, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, 0, 0, -13, 0, -13, 0, -13, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, -3, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 125, 0, 0, 40, 0, 41, 0, 42, 0, -43, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -43, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 126, 0, 0, 40, 0, 41, 0, 42, 0, -44, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -44, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 90, 0, 0, 40, 0, 41, 0, 42, 0, -45, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -45, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 91, 0, 0, 40, 0, 41, 0, 42, 0, -42, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -42, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 92, 0, 0, 40, 0, 41, 0, 42, 0, -47, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -47, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 94, 0, 0, 40, 0, 41, 0, 42, 0, -48, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -48, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 95, 0, 0, 40, 0, 41, 0, 42, 0, -46, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, -46, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 96, 0, 0, 40, 0, 41, 0, 42, 0, 0, 60, 0, -34, -34, 61, 62, -34, 0, -34, -34, -34, -34, -34, 63, 64, 65, 66, 0, -34, -34, 67, -34, -34, -34, -34, -34, -34, -34, -34, -34, 0, 0, -34, 0, -34, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, -17, -17, 61, 62, -17, 0, -17, -17, -17, -17, -17, 63, 64, 65, 66, 0, -17, -17, 67, -17, -17, -17, -17, -17, -17, -17, -17, -17, 0, 0, -17, 0, -17, 0, -17, 0, 0, -24, 0, -24, -24, -24, -24, -24, 0, -24, -24, -24, -24, -24, 63, 64, -24, -24, 0, -24, -24, 67, -24, -24, -24, -24, -24, -24, -24, -24, -24, 0, 0, -24, 0, -24, 0, -24, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 128, 0, 0, 40, 0, 41, 0, 42, 0, 0, 60, 0, 0, 0, 61, 62, 0, 0, 0, 0, 129, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 6, 7, 29, 0, 0, 30, 0, 31, 32, 8, 0, 9, 10, 0, 0, 33, 12, 34, 0, 0, 35, 36, 0, 37, 38, 130, 0, 0, 40, 0, 41, 0, 42, 0, 0, 60, 0, 131, 0, 61, 62, 0, 0, 0, 0, 0, 0, 0, 63, 64, 65, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, -51, -51, -51, -51, -51, 0, -51, -51, -51, -51, -51, -51, -51, -51, -51, 0, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, 0, 0, -51, 0, -51, 0, -51] 

function reduce(stk:stack.stkele, ruleno:int)stack.stkele // generated function // 
let rulelen = [ 2, 7, 7, 4, 5, 5, 2, 1, 3, 3, 5, 1, 4, 4, 3, 3, 6, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 4, 2, 5, 1, 3, 1, 3, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]_ruleno 
let newstk = pop(stk, rulelen) 
let subtrees = top(stk, rulelen) 
let newtree = 
if ruleno = // G F # // 1 then result.subtrees_1 else 
if ruleno = // F W W(P)T E // 2 then let P = sons.result.subtrees_4 tree(label.result.subtrees_1, [ tree(label.result.subtrees_2, @(+, firstson, empty:seq.tree.word, P)+ result.subtrees_6)]+ result.subtrees_7 + P)else 
if ruleno = // F W N(P)T E // 3 then let P = sons.result.subtrees_4 tree(label.result.subtrees_1, [ tree(label.result.subtrees_2, @(+, firstson, empty:seq.tree.word, P)+ result.subtrees_6)]+ result.subtrees_7 + P)else 
if ruleno = // F W W T E // 4 then tree(label.result.subtrees_1, [ tree(label.result.subtrees_2, [ result.subtrees_3])]+ result.subtrees_4)else 
if ruleno = // F W W:T E // 5 then tree(label.result.subtrees_1, [ tree(merge([ label.result.subtrees_2]+":"+ print.result.subtrees_4), [ result.subtrees_4]), result.subtrees_5])else 
if ruleno = // F W W is W P // 6 then let s = sons.result.subtrees_5 let kind = label.result.subtrees_4 let q = if kind ="encoding"_1 then [ s_1_1]else @(+, insertson.[ result.subtrees_2], empty:seq.tree.word, s)tree(if kind ="record"_1 then"struct"_1 else kind, [ result.subtrees_2]+ q)else 
if ruleno = // F W T // 7 then tree(label.result.subtrees_1, [ result.subtrees_2])else 
if ruleno = // P T // 8 then tree("P"_1, [ tree(":"_1, [ result.subtrees_1])])else 
if ruleno = // P P, T // 9 then tree("P"_1, sons.result.subtrees_1 + tree(":"_1, [ result.subtrees_3]))else 
if ruleno = // P W:T // 10 then tree("P"_1, [ tree(label.result.subtrees_1, [ result.subtrees_3])])else 
if ruleno = // P P, W:T // 11 then tree("P"_1, sons.result.subtrees_1 + tree(label.result.subtrees_3, [ result.subtrees_5]))else 
if ruleno = // E W // 12 then result.subtrees_1 else 
if ruleno = // E N(L)// 13 then tree(label.result.subtrees_1, sons.result.subtrees_3)else 
if ruleno = // E W(L)// 14 then tree(label.result.subtrees_1, sons.result.subtrees_3)else 
if ruleno = // E(E)// 15 then result.subtrees_2 else 
if ruleno = // E { E } // 16 then result.subtrees_2 else 
if ruleno = // E if E then E else E // 17 then tree("if"_1, [ result.subtrees_2, result.subtrees_4, result.subtrees_6])else 
if ruleno = // E E^E // 18 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E E_E // 19 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E-E // 20 then let t = result.subtrees_2 if nosons.t = 0 ∧ hasdigit(label.t)then tree(merge("-"+ label.t))else if nosons.t = 2 ∧ label.t ="makereal"_1 ∧ nosons.t_1 = 0 ∧ hasdigit(label.t_1)then tree(label.t, [ tree(merge("-"+ label.t_1)), t_2])else tree("-"_1, [ result.subtrees_2])else 
if ruleno = // E W.E // 21 then tree(label.result.subtrees_1, [ result.subtrees_3])else 
if ruleno = // E N.E // 22 then tree(label.result.subtrees_1, [ result.subtrees_3])else 
if ruleno = // E E * E // 23 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E E-E // 24 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E E = E // 25 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E E > E // 26 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E E ∧ E // 27 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // E E ∨ E // 28 then tree(label.result.subtrees_2, [ result.subtrees_1, result.subtrees_3])else 
if ruleno = // L E // 29 then tree("L"_1, [ result.subtrees_1])else 
if ruleno = // L L, E // 30 then tree("L"_1, sons.result.subtrees_1 + result.subtrees_3)else 
if ruleno = // E [ L]// 31 then tree("$build"_1, sons.result.subtrees_2)else 
if ruleno = // A let W = E // 32 then tree("let"_1, [ result.subtrees_2, result.subtrees_4])else 
if ruleno = // E A E // 33 then let a = result.subtrees_1 tree("let"_1, [ a_1, a_2, result.subtrees_2])else 
if ruleno = // E assert E report E E // 34 then tree("assert"_1, [ result.subtrees_2, result.subtrees_5, result.subtrees_4])else 
if ruleno = // E I // 35 then result.subtrees_1 else 
if ruleno = // E I.I // 36 then let d = decode.label.result.subtrees_3 tree("makereal"_1, [ tree.encodeword(decode.label.result.subtrees_1 + d), tree.countdigits(d, 1, 0)])else 
if ruleno = // T W // 37 then result.subtrees_1 else 
if ruleno = // T W.T // 38 then tree(label.result.subtrees_1, [ result.subtrees_3])else 
if ruleno = // E W:T // 39 then tree(merge([ label.result.subtrees_1,":"_1]+ print.result.subtrees_3))else 
if ruleno = // E $wordlist // 40 then result.subtrees_1 else 
if ruleno = // E comment E // 41 then tree("comment"_1, [ result.subtrees_2]+ sons.result.subtrees_1)else 
if ruleno = // N_// 42 then result.subtrees_1 else 
if ruleno = // N-// 43 then result.subtrees_1 else 
if ruleno = // N = // 44 then result.subtrees_1 else 
if ruleno = // N > // 45 then result.subtrees_1 else 
if ruleno = // N * // 46 then result.subtrees_1 else 
if ruleno = // N ∧ // 47 then result.subtrees_1 else 
if ruleno = // N ∨ // 48 then result.subtrees_1 else 
if ruleno = // K E // 49 then result.subtrees_1 else 
if ruleno = // K N // 50 then result.subtrees_1 else 
assert ruleno = // E @(K, K, E, E)// 51 report"invalid rule number"+ toword.ruleno 
tree("@"_1, [ result.subtrees_3, result.subtrees_5, result.subtrees_7, result.subtrees_9]) 
let leftsidetoken = [ 32, 33, 33, 33, 33, 33, 33, 35, 35, 35, 35, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 37, 37, 31, 30, 31, 31, 31, 31, 19, 19, 31, 31, 31, 36, 36, 36, 36, 36, 36, 36, 39, 39, 31]_ruleno 
let actioncode = actiontable_(leftsidetoken + length.tokenlist * stateno.top.newstk) 
assert actioncode > 0 report"??" 
push(newstk, stkele(actioncode, newtree)) 

function printstate(stateno:int)seq.word 
[ 
"G ' F # | F ' W T | F ' W W is W P | F ' W W:T E | F ' W W(P)T E | F ' W W T E | F ' W N(P)T E 
", 
"G F ' # 
", 
"T ' W | T ' W.T | F W ' T | F W ' W is W P | F W ' W:T E | F W ' W(P)T E | F W ' W T E | F W ' N(P)T E | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"G F # ' 
", 
"N-' 
", 
"N = ' 
", 
"N > ' 
", 
"N_' 
", 
"N ∧ ' 
", 
"N ∨ ' 
", 
"F W T ' 
", 
"N * ' 
", 
"T ' W | T W ' | T ' W.T | T W '.T | F W W ' is W P | F W W ':T E | F W W '(P)T E | F W W ' T E 
", 
"F W N '(P)T E 
", 
"T ' W | T ' W.T | T W.' T 
", 
"F W W is ' W P 
", 
"T ' W | T ' W.T | F W W:' T E 
", 
"T ' W | T ' W.T | F W W(' P)T E | P ' T | P ' W:T | P ' P, T | P ' P, W:T 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | F W W T ' E | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"T W ' | T W '.T 
", 
"T ' W | T ' W.T | F W N(' P)T E | P ' T | P ' W:T | P ' P, T | P ' P, W:T 
", 
"T W.T ' 
", 
"T ' W | T ' W.T | F W W is W ' P | P ' T | P ' W:T | P ' P, T | P ' P, W:T 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | F W W:T ' E | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"P T ' 
", 
"T W ' | T W '.T | P W ':T 
", 
"F W W(P ')T E | P P ', T | P P ', W:T 
", 
"A ' let W = E | E '-E | E-' E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N-' | N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E { ' E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E comment ' E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E(' E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E [ ' L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | L ' E | L ' L, E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E if ' E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E $wordlist ' 
", 
"A let ' W = E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E assert ' E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E @ '(K, K, E, E) 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E A ' E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | F W W T E ' 
", 
"E W ' | E W '.E | E W ':T | E W '(L) 
", 
"E N '.E | E N '(L) 
", 
"E I ' | E I '.I 
", 
"F W N(P ')T E | P P ', T | P P ', W:T 
", 
"F W W is W P ' | P P ', T | P P ', W:T 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | F W W:T E ' 
", 
"T ' W | T ' W.T | P W:' T 
", 
"T ' W | T ' W.T | F W W(P)' T E 
", 
"T ' W | T ' W.T | P P, ' T | P P, ' W:T 
", 
"E-E ' | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E { E ' } | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E comment E ' | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E(E ')| E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | L E ' 
", 
"E [ L ']| L L ', E 
", 
"E if E ' then E else E | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A let W ' = E 
", 
"E assert E ' report E E | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E @(' K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | K ' E | K ' N 
", 
"E A E ' | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E E-' E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E E = ' E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E E > ' E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E E_' E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E E^' E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E E ∧ ' E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E E ∨ ' E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E E * ' E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E W.' E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"T ' W | T ' W.T | E W:' T 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E W(' L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | L ' E | L ' L, E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E N.' E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E N(' L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | L ' E | L ' L, E 
", 
"E I.' I 
", 
"T ' W | T ' W.T | F W N(P)' T E 
", 
"P W:T ' 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | F W W(P)T ' E | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"P P, T ' 
", 
"T W ' | T W '.T | P P, W ':T 
", 
"E { E } ' 
", 
"E(E)' 
", 
"E [ L]' 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | L L, ' E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E if E then ' E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | A let W = ' E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E assert E report ' E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | K E ' 
", 
"E N '.E | E N '(L)| K N ' 
", 
"E @(K ', K, E, E) 
", 
"E E '-E | E E-E ' | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E = E ' | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E > E ' | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E_E ' | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E^E ' | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ∧ E ' | E E ' ∨ E | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ∨ E ' | E E ' * E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | E E * E ' 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | E W.E ' 
", 
"E W:T ' 
", 
"E W(L ')| L L ', E 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | E N.E ' 
", 
"E N(L ')| L L ', E 
", 
"E I.I ' 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | F W N(P)T ' E | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | F W W(P)T E ' 
", 
"T ' W | T ' W.T | P P, W:' T 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | L L, E ' 
", 
"E if E then E ' else E | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A let W = E ' | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E assert E report E ' E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E E '-E | E ' E = E | E E ' = E | E ' E > E | E E ' > E | E ' E_E | E E '_E | E ' E^E | E E '^E | E ' E ∧ E | E E ' ∧ E | E ' E ∨ E | E E ' ∨ E | E ' E * E | E E ' * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E @(K, ' K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | K ' E | K ' N 
", 
"E W(L)' 
", 
"E N(L)' 
", 
"E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E | F W N(P)T E ' 
", 
"P P, W:T ' 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E if E then E else ' E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E-' E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E E-' E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N-' | N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E E = ' E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N = ' | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E E > ' E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N > ' | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E E_' E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N_' | N ' ∧ | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E E ∧ ' E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ∧ ' | N ' ∨ | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E E ∨ ' E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ∨ ' | N ' * 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E E * ' E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * | N * ' 
", 
"E assert E report E E ' | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E @(K, K ', E, E) 
", 
"E if E then E else E ' | E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E-E ' | E E '-E | E E-E ' | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E @(K, K, ' E, E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E @(K, K, E ', E)| E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"A ' let W = E | E '-E | E ' { E } | E ' comment E | E '(E)| E ' [ L]| E ' if E then E else E | E ' $wordlist | E ' assert E report E E | E ' @(K, K, E, E)| E @(K, K, E, ' E)| E ' A E | E ' E-E | E ' E = E | E ' E > E | E ' E_E | E ' E^E | E ' E ∧ E | E ' E ∨ E | E ' E * E | E ' W | E ' W.E | E ' W:T | E ' W(L)| E ' N.E | E ' N(L)| E ' I | E ' I.I | N '-| N ' = | N ' > | N '_| N ' ∧ | N ' ∨ | N ' * 
", 
"E @(K, K, E, E ')| E E '-E | E E ' = E | E E ' > E | E E '_E | E E '^E | E E ' ∧ E | E E ' ∨ E | E E ' * E 
", 
"E @(K, K, E, E)' 
"]_stateno

