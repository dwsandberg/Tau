#!/usr/local/bin/tau

module tauparser

run tauparser test2

use libdesc

use libscope

use passcommon

use process.tree.word

use profile

use seq.int

use seq.lexaction

use seq.moddesc

use seq.seq.word

use seq.stack.stkele

use seq.stepresult

use seq.stkele

use seq.tree.word

use set.word

use stack.stkele

use stdlib



use tree.word

Function test2 seq.word X."stdlib"+ profileresults."time"


 Function test3 seq.word
  let l ="Function empty:seq.seq.word export" // "function checkpretty(libheader:seq.seq.word, mod:moddesc)boolean 
     let x = checkpretty(src(mod), 1, empty:set.seq.word, empty:seq.seq.word, empty:seq.seq.word) 
     let z = createfile([ merge([ libname(mod)]+ &quot / &quot + [ modname(mod)]+ &quot .ls &quot )], if modname(mod)= libname(mod)then libheader + x else x )
     true   " //
  print.parse(getheader.l)+":::"+getheader.l 
  
  
   function getheader(s:seq.word) seq.word  if length.s < 3 then s else
      let startoftype = if  s_3="(" _1  then  findindex(")"_1,s,4)+1 else if s_3=":"_1  then 4 else 3
      let afterreturntype  =consumetype( s, startoftype+1 )
      let aftercomments=consumecomment(s,afterreturntype)
       if aftercomments &le length.s &and s_aftercomments in "builtin unbound export" then s else
        assert true report subseq(s,aftercomments,length.s)
     subseq(s,1, aftercomments-1)+"stub"
     
     function consumetype(s:seq.word,i:int) int
       if i > length.s then i
       else if s_i="."_1 then consumetype(s,i+2) else i
    
    function consumecomment(s:seq.word,i:int) int
      if i > length.s then i 
       else if s_i="//"_1 then 
         consumecomment(s,findindex("//"_1,s,4)+1) else i 

function kk(stateno:int,token:int) seq.word      
  if 0 &ne   actiontable_ (length.tokenlist * stateno  + token) then [tokenlist_token] else empty:seq.word
  
function expect(stateno:int) seq.word  let l=@(+,kk.stateno, "",arithseq(length.tokenlist,1,1))
  toseq.(asset.l-asset."-=_^∧ ∨ *")

function printstate(stateno:int)seq.word [ toword.stateno]


function X(libname:seq.word)seq.word @(+, check,"", modules.tolibdesc(libname_1))

function check(m:moddesc)seq.word @(+, check,"", src.m)

function check(input:seq.word)seq.word 
 PROFILE.if input_1 in"Function function"
  then  // let p = process.parse.input if aborted.p then"&br failed"+ input + message.p else let c =(result.p)  //
    let c = parse.input 
   let d = oldway.input 
   if c = d 
   then"&br OK"+ input_2 
   else"&br NEW"+ print.c +"&br OLD"+ print.d 
  else""

function oldway(input:seq.word)tree.word PROFILE.NOINLINE.parse(input, tree("X"_1))

function firstson(t:tree.word)tree.word t_1

function countdigits(s:seq.int, i:int, result:int)word 
 // does not count no-break spaces // 
  if i > length.s 
  then toword.result 
  else countdigits(s, i + 1, result + if s_i = nbspchar then 0 else 1)

type stepresult is record stk:stack.stkele, place:int, input:seq.word, tokenstate:int, string:seq.word

type stkele is record stateno:int, result:tree.word

type lexaction is record w:word, tokenno:int, label:word


function consumeinput(b:stepresult, next:word)stepresult 
// generated by genlex module in tools // 
let Wtoken = 30 
let Itoken = 35 
let commenttoken = 9 
let stringtoken = 21 
if tokenstate.b ≠ 0 then 
if tokenstate.b = stringtoken then 
if next ="&quot"_1 then 
BB(stringtoken, tree("$wordlist"_1, @(+, tree, empty:seq.tree.word, string.b)), stk.b, place.b, input.b) 
else // add to string // 
stepresult(stk.b, place.b + 1, input.b, tokenstate.b, string.b + if next = merge(["&"_1,"quot"_1])then"&quot"_1 else next) 
else if next ="//"_1 then 
BB(commenttoken, tree("comment"_1, @(+, tree, empty:seq.tree.word, string.b)), stk.b, place.b, input.b) 
else // add to string // stepresult(stk.b, place.b + 1, input.b, tokenstate.b, string.b + next) 
else let act = if next ="."_1 then lexaction("."_1, 1,"."_1) 
else let x = decode(next) 
[ lexaction("mod"_1, 20,"mod"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("&quot"_1, 0,"&quot"_1) 
, lexaction("G"_1, 30,"G"_1) 
, lexaction("≠"_1, 5,"≠"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("L"_1, 30,"L"_1) 
, lexaction("≥"_1, 5,"≥"_1) 
, lexaction(","_1, 10,","_1) 
, lexaction("empty"_1, 30,"empty"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("comment"_1, 30,"comment"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("{"_1, 6,"{"_1) 
, lexaction("∪"_1, 20,"∪"_1) 
, lexaction("["_1, 12,"["_1) 
, lexaction("assert"_1, 25,"assert"_1) 
, lexaction("Function"_1, 30,"Function"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("@"_1, 27,"@"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("E"_1, 30,"E"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("mytype"_1, 30,"mytype"_1) 
, lexaction("seq"_1, 30,"seq"_1) 
, lexaction("*"_1, 20,"*"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("t"_1, 30,"t"_1) 
, lexaction("/"_1, 20,"/"_1) 
, lexaction("T"_1, 30,"T"_1) 
, lexaction("int"_1, 30,"int"_1) 
, lexaction("∨"_1, 16,"∨"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("∈"_1, 2,"∈"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("^"_1, 13,"^"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(">"_1, 5,">"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("use"_1, 30,"use"_1) 
, lexaction("if"_1, 19,"if"_1) 
, lexaction("#"_1, 18,"#"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("("_1, 11,"("_1) 
, lexaction(". "_1, 37,". "_1) 
, lexaction("r"_1, 30,"r"_1) 
, lexaction("-"_1, 2,"-"_1) 
, lexaction("$wordlist"_1, 30,"$wordlist"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("2"_1, 35,"2"_1) 
, lexaction("W"_1, 30,"W"_1) 
, lexaction("//"_1, 0,"//"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("inst"_1, 30,"inst"_1) 
, lexaction("∋"_1, 2,"∋"_1) 
, lexaction("<"_1, 5,"<"_1) 
, lexaction("a"_1, 30,"a"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(">>"_1, 5,">>"_1) 
, lexaction("F"_1, 30,"F"_1) 
, lexaction("function"_1, 30,"function"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("K"_1, 30,"K"_1) 
, lexaction("≤"_1, 5,"≤"_1) 
, lexaction("+"_1, 2,"+"_1) 
, lexaction("P"_1, 30,"P"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("0"_1, 35,"0"_1) 
, lexaction("then"_1, 22,"then"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("∩"_1, 20,"∩"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("report"_1, 26,"report"_1) 
, lexaction(":"_1, 7,":"_1) 
, lexaction("_"_1, 13,"_"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("?"_1, 5,"?"_1) 
, lexaction("in"_1, 2,"in"_1) 
, lexaction("<<"_1, 5,"<<"_1) 
, lexaction("word"_1, 30,"word"_1) 
, lexaction("i"_1, 30,"i"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("I"_1, 30,"I"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction(")"_1, 3,")"_1) 
, lexaction("N"_1, 30,"N"_1) 
, lexaction("s"_1, 30,"s"_1) 
, lexaction("let"_1, 24,"let"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("else"_1, 23,"else"_1) 
, lexaction("∧"_1, 15,"∧"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("}"_1, 8,"}"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("]"_1, 4,"]"_1) 
, lexaction(". "_1, 0,". "_1) 
, lexaction("="_1, 5,"="_1) 
, lexaction("b"_1, 30,"b"_1)]_(1 +(length.x * 131 + 1999 * x_1 + 164 * last.x)mod 106) 
if w.act ≠ next then BB(if hasdigit.next then Itoken else Wtoken, tree(next), stk.b, place.b, input.b) 
else if tokenno.act = 0 then 
if next ="&quot"_1 then // start word list // stepresult(stk.b, place.b + 1, input.b, stringtoken,"") 
else // start comment // stepresult(stk.b, place.b + 1, input.b, commenttoken,"") 
else BB(tokenno.act, tree.label.act, stk.b, place.b, input.b)

use parse

function BB(token:int, tr:tree.word, stk:stack.stkele,place:int,input:seq.word)stepresult 
   let stateno = stateno.top.stk 
  let actioncode = actiontable_(token + length.tokenlist * stateno)
  if actioncode > 0 
  then stepresult(push(stk, stkele(actioncode, tr)), place + 1, input, 0,"")
  else assert actioncode < 0 report"parse error expect: " +expect.stateno + "got: "+input_ place
    + prettynoparse(subseq(input, 1, place), 1, 0,"")
  let x = reduce(stk,-actioncode)
  BB(token, tr,  x, place, input)

Function parse(input:seq.word)tree.word 
 let a = @(consumeinput, identity, stepresult(push(empty:stack.stkele, stkele(startstate, tree("X"_1))), 1,input +"#", 0,""), input +"#")
  result(toseq(stk.a)_2)

noactions 1811 nosymbols:36 alphabet:.-)]= {:} comment,([_^∧ ∨ T # if * $wordlist then else let assert report @ F E W N G P L I K norules 46 nostate 122

function tokenlist seq.word 
 FORCEINLINE.
 {".-)]= {:} comment,([_^∧ ∨ T # if * $wordlist then else let assert report @ F E W N G P L I K"}

function startstate int 1

use seq.seq.int

function actiontable seq.int 
FORCEINLINE.
 [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 
 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 
 7, 0, 8, 9, 0, 0, 0, 10, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 11, 12, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 -39, 0, 0, 0, 0, 0, 0, 0, 0, -39, 
 -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 
 0, 0, 0, 0, 0, -40, -40, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 
 0, -38, -38, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 
 0, 0, 0, 0, 0, 0, 0, -42, -42, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 
 0, 0, 0, -43, -43, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 -41, 0, 0, 0, 0, 0, 0, 0, 0, -41, 
 -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 
 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 20, 0, 0, 21, 0, 0, 0, 
 0, 22, 0, 0, 6, 23, 0, 0, 24, 0, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 32, 33, 
 34, 0, 0, 0, 35, 0, 36, -33, -33, -33, 
 -33, -33, 0, -33, -33, -33, -33, -33, -33, -33, 
 -33, -33, 0, -33, -33, -33, -33, -33, -33, -33, 
 -33, -33, -33, 0, -33, -33, -33, 0, 0, 0, 
 -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 20, 0, 0, 37, 0, 0, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 38, 33, 34, 0, 
 0, 0, 35, 0, 0, 0, -6, 0, 0, 0, 
 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 36, -33, -33, -33, -33, -33, 39, -33, -33, -33, 
 -33, -33, -33, -33, -33, -33, 0, -33, -33, -33, 
 -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 
 -33, 0, 0, 0, -33, 0, 0, 0, 40, 0, 
 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, -39, 22, 0, 0, 6, 23, 0, 0, 
 24, -39, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 42, 33, 34, 0, 0, 0, 35, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 43, 33, 34, 0, 
 0, 0, 35, 0, 0, 22, 0, 0, 6, 23, 
 0, 0, 24, 0, 25, 26, 7, 0, 8, 9, 
 0, 0, 27, 10, 28, 0, 0, 29, 30, 0, 
 31, 0, 44, 33, 34, 0, 0, 0, 35, 0, 
 0, 22, 0, 0, 6, 23, 0, 0, 24, 0, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 45, 33, 
 34, 0, 0, 0, 35, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 46, 33, 34, 0, 0, 47, 
 35, 0, 0, 22, 0, 0, 6, 23, 0, 0, 
 24, 0, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 48, 33, 34, 0, 0, 0, 35, 0, 0, -36, 
 -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, 
 -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, 
 -36, -36, -36, -36, -36, 0, -36, -36, -36, 0, 
 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 
 0, 22, 0, 0, 6, 23, 0, 0, 24, 0, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 50, 33, 
 34, 0, 0, 0, 35, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 52, 0, 0, 53, 0, 0, 0, 
 0, 0, 0, 0, 54, 55, 56, 57, 0, -4, 
 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 59, -10, 
 -10, -10, -10, -10, 60, -10, -10, -10, 61, -10, 
 -10, -10, -10, -10, 0, -10, -10, -10, -10, -10, 
 -10, -10, -10, -10, -10, 0, -10, -10, -10, 0, 
 0, 0, -10, 0, 62, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 64, -31, -31, -31, -31, -31, 0, -31, -31, -31, 
 -31, -31, -31, -31, -31, -31, 0, -31, -31, -31, 
 -31, -31, -31, -31, -31, -31, -31, 0, -31, -31, 
 -31, 0, 0, 0, -31, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 
 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 
 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 
 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 
 54, 55, 56, 57, 0, -5, 0, 58, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 
 0, 0, 0, -18, -18, -18, -18, -18, 0, -18, 
 -18, -18, -18, -18, 54, 55, -18, -18, 0, -18, 
 -18, 58, -18, -18, -18, -18, -18, -18, -18, 0, 
 -18, -18, -18, 0, 0, 0, -18, 0, 0, 52, 
 0, 0, 53, 0, 0, 71, 0, 0, 0, 0, 
 54, 55, 56, 57, 0, 0, 0, 58, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, -37, -37, -37, -37, -37, 
 0, -37, -37, -37, -37, -37, 54, 55, -37, -37, 
 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, 
 -37, 0, -37, -37, -37, 0, 0, 0, -37, 0, 
 0, 52, 72, 0, 53, 0, 0, 0, 0, 0, 
 0, 0, 54, 55, 56, 57, 0, 0, 0, 58, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 52, -26, -26, 
 53, 0, 0, 0, 0, -26, 0, 0, 54, 55, 
 56, 57, 0, 0, 0, 58, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 
 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 
 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 
 54, 55, 56, 57, 0, 0, 0, 58, 0, 75, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 52, 0, 0, 53, 0, 0, 0, 0, 0, 
 0, 0, 54, 55, 56, 57, 0, 0, 0, 58, 
 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 78, 33, 79, 0, 0, 0, 
 35, 80, 0, 22, 0, 0, 6, 23, 0, 0, 
 24, 0, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 81, 33, 34, 0, 0, 0, 35, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 82, 33, 34, 0, 
 0, 0, 35, 0, 0, 22, 0, 0, 6, 23, 
 0, 0, 24, 0, 25, 26, 7, 0, 8, 9, 
 0, 0, 27, 10, 28, 0, 0, 29, 30, 0, 
 31, 0, 83, 33, 34, 0, 0, 0, 35, 0, 
 0, 22, 0, 0, 6, 23, 0, 0, 24, 0, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 84, 33, 
 34, 0, 0, 0, 35, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 85, 33, 34, 0, 0, 0, 
 35, 0, 0, 22, 0, 0, 6, 23, 0, 0, 
 24, 0, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 86, 33, 34, 0, 0, 0, 35, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 87, 33, 34, 0, 
 0, 0, 35, 0, 0, 22, 0, 0, 6, 23, 
 0, 0, 24, 0, 25, 26, 7, 0, 8, 9, 
 0, 0, 27, 10, 28, 0, 0, 29, 30, 0, 
 31, 0, 88, 33, 34, 0, 0, 0, 35, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 
 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 46, 33, 34, 0, 0, 90, 
 35, 0, 0, 22, 0, 0, 6, 23, 0, 0, 
 24, 0, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 91, 33, 34, 0, 0, 0, 35, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 46, 33, 34, 0, 
 0, 92, 35, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 
 0, -34, -34, -34, -34, -34, 0, -34, -34, -34, 
 -34, -34, -34, -34, -34, -34, 0, -34, -34, -34, 
 -34, -34, -34, -34, -34, -34, -34, 0, -34, -34, 
 -34, 0, 0, 0, -34, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 
 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 
 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 95, 33, 34, 0, 
 0, 0, 35, 0, 0, 0, -7, 0, 0, 0, 
 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 36, -33, -33, -33, -33, -33, 96, -33, -33, -33, 
 -33, -33, -33, -33, -33, -33, 0, -33, -33, -33, 
 -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 
 -33, 0, 0, 0, -33, 0, 0, -14, -14, -14, 
 -14, -14, 0, -14, -14, -14, -14, -14, -14, -14, 
 -14, -14, 0, -14, -14, -14, -14, -14, -14, -14, 
 -14, -14, -14, 0, -14, -14, -14, 0, 0, 0, 
 -14, 0, 0, -13, -13, -13, -13, -13, 0, -13, 
 -13, -13, -13, -13, -13, -13, -13, -13, 0, -13, 
 -13, -13, -13, -13, -13, -13, -13, -13, -13, 0, 
 -13, -13, -13, 0, 0, 0, -13, 0, 0, -28, 
 -28, -28, -28, -28, 0, -28, -28, -28, -28, -28, 
 -28, -28, -28, -28, 0, -28, -28, -28, -28, -28, 
 -28, -28, -28, -28, -28, 0, -28, -28, -28, 0, 
 0, 0, -28, 0, 0, 22, 0, 0, 6, 23, 
 0, 0, 24, 0, 25, 26, 7, 0, 8, 9, 
 0, 0, 27, 10, 28, 0, 0, 29, 30, 0, 
 31, 0, 97, 33, 34, 0, 0, 0, 35, 0, 
 0, 22, 0, 0, 6, 23, 0, 0, 24, 0, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 98, 33, 
 34, 0, 0, 0, 35, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 99, 33, 34, 0, 0, 0, 
 35, 0, 0, 22, 0, 0, 6, 23, 0, 0, 
 24, 0, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 100, 33, 34, 0, 0, 0, 35, 0, 0, 52, 
 0, 0, 53, 0, 0, 0, 0, -44, 0, 0, 
 54, 55, 56, 57, 0, 0, 0, 58, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 
 0, 0, 0, -45, 63, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, -22, -22, -22, 
 -22, -22, 0, -22, -22, -22, -22, -22, 54, 55, 
 -22, -22, 0, -22, -22, 58, -22, -22, -22, -22, 
 -22, -22, -22, 0, -22, -22, -22, 0, 0, 0, 
 -22, 0, 0, 52, -23, -23, -23, -23, 0, -23, 
 -23, -23, -23, -23, 54, 55, -23, -23, 0, -23, 
 -23, 58, -23, -23, -23, -23, -23, -23, -23, 0, 
 -23, -23, -23, 0, 0, 0, -23, 0, 0, -17, 
 -17, -17, -17, -17, 0, -17, -17, -17, -17, -17, 
 -17, 55, -17, -17, 0, -17, -17, -17, -17, -17, 
 -17, -17, -17, -17, -17, 0, -17, -17, -17, 0, 
 0, 0, -17, 0, 0, 52, -16, -16, 53, -16, 
 0, -16, -16, -16, -16, -16, 54, 55, 56, 57, 
 0, -16, -16, 58, -16, -16, -16, -16, -16, -16, 
 -16, 0, -16, -16, -16, 0, 0, 0, -16, 0, 
 0, 52, -24, -24, 53, -24, 0, -24, -24, -24, 
 -24, -24, 54, 55, -24, -24, 0, -24, -24, 58, 
 -24, -24, -24, -24, -24, -24, -24, 0, -24, -24, 
 -24, 0, 0, 0, -24, 0, 0, 52, -25, -25, 
 53, -25, 0, -25, -25, -25, -25, -25, 54, 55, 
 56, -25, 0, -25, -25, 58, -25, -25, -25, -25, 
 -25, -25, -25, 0, -25, -25, -25, 0, 0, 0, 
 -25, 0, 0, -21, -21, -21, -21, -21, 0, -21, 
 -21, -21, -21, -21, 54, 55, -21, -21, 0, -21, 
 -21, -21, -21, -21, -21, -21, -21, -21, -21, 0, 
 -21, -21, -21, 0, 0, 0, -21, 0, 0, -19, 
 -19, -19, -19, -19, 0, -19, -19, -19, -19, -19, 
 54, 55, -19, -19, 0, -19, -19, -19, -19, -19, 
 -19, -19, -19, -19, -19, 0, -19, -19, -19, 0, 
 0, 0, -19, 0, 0, -35, -35, -35, -35, -35, 
 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, 
 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, 
 -35, 0, -35, -35, -35, 0, 0, 0, -35, 0, 
 0, 0, 102, 0, 0, 0, 0, 0, 0, 74, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, -20, -20, -20, 
 -20, -20, 0, -20, -20, -20, -20, -20, 54, 55, 
 -20, -20, 0, -20, -20, -20, -20, -20, -20, -20, 
 -20, -20, -20, 0, -20, -20, -20, 0, 0, 0, 
 -20, 0, 0, 0, 103, 0, 0, 0, 0, 0, 
 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 
 -32, -32, -32, -32, 0, -32, -32, -32, -32, -32, 
 -32, -32, -32, -32, 0, -32, -32, -32, -32, -32, 
 -32, -32, -32, -32, -32, 0, -32, -32, -32, 0, 
 0, 0, -32, 0, 0, 22, 0, 0, 6, 23, 
 0, 0, 24, 0, 25, 26, 7, 0, 8, 9, 
 0, 0, 27, 10, 28, 0, 0, 29, 30, 0, 
 31, 0, 104, 33, 34, 0, 0, 0, 35, 0, 
 0, 52, 0, 0, 53, 0, 0, 0, 0, 0, 
 0, 0, 54, 55, 56, 57, 0, -2, 0, 58, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 
 0, 0, 0, 52, -27, -27, 53, 0, 0, 0, 
 0, -27, 0, 0, 54, 55, 56, 57, 0, 0, 
 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 
 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 
 54, 55, 56, 57, 0, 0, 0, 58, 0, 0, 
 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 107, 0, 0, 108, 23, 
 0, 0, 24, 0, 25, 26, 109, 55, 110, 111, 
 0, 0, 27, 112, 28, 0, 0, 29, 30, 0, 
 31, 0, 113, 33, 34, 0, 0, 0, 35, 0, 
 0, 107, 0, 0, 108, 23, 0, 0, 24, 0, 
 25, 26, 109, 55, 110, 111, 0, 0, 27, 112, 
 28, 0, 0, 29, 30, 0, 31, 0, 114, 33, 
 34, 0, 0, 0, 35, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 78, 33, 79, 0, 0, 0, 
 35, 115, 0, -12, -12, -12, -12, -12, 0, -12, 
 -12, -12, -12, -12, -12, -12, -12, -12, 0, -12, 
 -12, -12, -12, -12, -12, -12, -12, -12, -12, 0, 
 -12, -12, -12, 0, 0, 0, -12, 0, 0, -11, 
 -11, -11, -11, -11, 0, -11, -11, -11, -11, -11, 
 -11, -11, -11, -11, 0, -11, -11, -11, -11, -11, 
 -11, -11, -11, -11, -11, 0, -11, -11, -11, 0, 
 0, 0, -11, 0, 0, 52, 0, 0, 53, 0, 
 0, 0, 0, 0, 0, 0, 54, 55, 56, 57, 
 0, -3, 0, 58, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, -9, 0, 0, 0, 0, 0, 0, -9, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 
 6, 23, 0, 0, 24, 0, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 116, 33, 34, 0, 0, 0, 
 35, 0, -39, 22, 0, 0, 6, 23, 0, 0, 
 24, -39, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 117, 33, 34, 0, 0, 0, 35, 0, -40, 22, 
 0, 0, 6, 23, 0, 0, 24, -40, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 82, 33, 34, 0, 
 0, 0, 35, 0, -38, 22, 0, 0, 6, 23, 
 0, 0, 24, -38, 25, 26, 7, 0, 8, 9, 
 0, 0, 27, 10, 28, 0, 0, 29, 30, 0, 
 31, 0, 83, 33, 34, 0, 0, 0, 35, 0, 
 -42, 22, 0, 0, 6, 23, 0, 0, 24, -42, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 85, 33, 
 34, 0, 0, 0, 35, 0, -43, 22, 0, 0, 
 6, 23, 0, 0, 24, -43, 25, 26, 7, 0, 
 8, 9, 0, 0, 27, 10, 28, 0, 0, 29, 
 30, 0, 31, 0, 86, 33, 34, 0, 0, 0, 
 35, 0, -41, 22, 0, 0, 6, 23, 0, 0, 
 24, -41, 25, 26, 7, 0, 8, 9, 0, 0, 
 27, 10, 28, 0, 0, 29, 30, 0, 31, 0, 
 87, 33, 34, 0, 0, 0, 35, 0, 0, 52, 
 -29, -29, 53, -29, 0, -29, -29, -29, -29, -29, 
 54, 55, 56, 57, 0, -29, -29, 58, -29, -29, 
 -29, -29, -29, -29, -29, 0, -29, -29, -29, 0, 
 0, 0, -29, 0, 0, 52, -30, -30, 53, -30, 
 0, -30, -30, -30, -30, -30, 54, 55, 56, 57, 
 0, -30, -30, 58, -30, -30, -30, -30, -30, -30, 
 -30, 0, -30, -30, -30, 0, 0, 0, -30, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 52, -15, -15, 
 53, -15, 0, -15, -15, -15, -15, -15, 54, 55, 
 56, 57, 0, -15, -15, 58, -15, -15, -15, -15, 
 -15, -15, -15, 0, -15, -15, -15, 0, 0, 0, 
 -15, 0, 0, -22, -22, -22, -22, -22, 0, -22, 
 -22, -22, -22, -22, 54, 55, -22, -22, 0, -22, 
 -22, 58, -22, -22, -22, -22, -22, -22, -22, 0, 
 -22, -22, -22, 0, 0, 0, -22, 0, 0, 22, 
 0, 0, 6, 23, 0, 0, 24, 0, 25, 26, 
 7, 0, 8, 9, 0, 0, 27, 10, 28, 0, 
 0, 29, 30, 0, 31, 0, 119, 33, 34, 0, 
 0, 0, 35, 0, 0, 52, 0, 0, 53, 0, 
 0, 0, 0, 120, 0, 0, 54, 55, 56, 57, 
 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 22, 0, 0, 6, 23, 0, 0, 24, 0, 
 25, 26, 7, 0, 8, 9, 0, 0, 27, 10, 
 28, 0, 0, 29, 30, 0, 31, 0, 121, 33, 
 34, 0, 0, 0, 35, 0, 0, 52, 122, 0, 
 53, 0, 0, 0, 0, 0, 0, 0, 54, 55, 
 56, 57, 0, 0, 0, 58, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, -46, -46, -46, -46, -46, 0, -46, 
 -46, -46, -46, -46, -46, -46, -46, -46, 0, -46, 
 -46, -46, -46, -46, -46, -46, -46, -46, -46, 0, 
 -46, -46, -46, 0, 0, 0, -46]

function reduce(stk:stack.stkele, ruleno:int)stack.stkele 
 // generated function // 
  FORCEINLINE.let rulelen = [ 2, 7, 7, 4, 5, 1, 3, 3, 5, 1, 
   4, 4, 3, 3, 6, 3, 3, 2, 3, 3, 
   3, 3, 3, 3, 3, 1, 3, 3, 5, 5, 
   1, 3, 1, 3, 3, 1, 2, 1, 1, 1, 
   1, 1, 1, 1, 1, 10]_ruleno 
   let newstk = pop(stk, rulelen)
   let subtrees = top(stk, rulelen)
   let newtree = if ruleno = // G F # // 1 
    then result(subtrees_1)
    else if ruleno = // F W W(P)T E // 2 
    then let P = sons.result(subtrees_4)
     tree(label.result(subtrees_1), [ tree(label.result(subtrees_2), @(+, firstson, empty:seq.tree.word, P)+ result(subtrees_6))]+ result(subtrees_7)+ P)
    else if ruleno = // F W N(P)T E // 3 
    then let P = sons.result(subtrees_4)
     tree(label.result(subtrees_1), [ tree(label.result(subtrees_2), @(+, firstson, empty:seq.tree.word, P)+ result(subtrees_6))]+ result(subtrees_7)+ P)
    else if ruleno = // F W W T E // 4 
    then tree(label.result(subtrees_1), [ tree(label.result(subtrees_2), [ result(subtrees_3)])]+ result(subtrees_4))
    else if ruleno = // F W W:T E // 5 
    then tree(label.result(subtrees_1), [ tree(merge([ label.result(subtrees_2)]+":"+ print.result(subtrees_4)), [ result(subtrees_4)]), 
    result(subtrees_5)])
    else if ruleno = // P T // 6 
    then tree("P"_1, [ tree(":"_1, [ result(subtrees_1)])])
    else if ruleno = // P P, T // 7 
    then tree("P"_1, sons.result(subtrees_1)+ tree(":"_1, [ result(subtrees_3)]))
    else if ruleno = // P W:T // 8 
    then tree("P"_1, [ tree(label.result(subtrees_1), [ result(subtrees_3)])])
    else if ruleno = // P P, W:T // 9 
    then tree("P"_1, sons.result(subtrees_1)+ tree(label.result(subtrees_3), [ result(subtrees_5)]))
    else if ruleno = // E W // 10 
    then result(subtrees_1)
    else if ruleno = // E N(L)// 11 
    then tree(label.result(subtrees_1), sons.result(subtrees_3))
    else if ruleno = // E W(L)// 12 
    then tree(label.result(subtrees_1), sons.result(subtrees_3))
    else if ruleno = // E(E)// 13 
    then result(subtrees_2)
    else if ruleno = // E { E } // 14 
    then result(subtrees_2)
    else if ruleno = // E if E then E else E // 15 
    then tree("if"_1, [ result(subtrees_2), result(subtrees_4), result(subtrees_6)])
    else if ruleno = // E E^E // 16 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // E E_E // 17 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // E-E // 18 
    then let t = result(subtrees_2)
     if nosons.t = 0 ∧ hasdigit.label.t 
     then tree.merge("-"+ label.t)
     else if nosons.t = 2 ∧ label.t ="makereal"_1 ∧ nosons(t_1)= 0 ∧ hasdigit.label(t_1)
     then tree(label.t, [ tree.merge("-"+ label(t_1)), t_2])
     else tree("-"_1, [ result(subtrees_2)])
    else if ruleno = // E W.E // 19 
    then tree(label.result(subtrees_1), [ result(subtrees_3)])
    else if ruleno = // E N.E // 20 
    then tree(label.result(subtrees_1), [ result(subtrees_3)])
    else if ruleno = // E E * E // 21 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // E E-E // 22 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // E E = E // 23 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // E E ∧ E // 24 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // E E ∨ E // 25 
    then tree(label.result(subtrees_2), [ result(subtrees_1), result(subtrees_3)])
    else if ruleno = // L E // 26 
    then tree("L"_1, [ result(subtrees_1)])
    else if ruleno = // L L, E // 27 
    then tree("L"_1, sons.result(subtrees_1)+ result(subtrees_3))
    else if ruleno = // E [ L]// 28 
    then tree("$build"_1, sons.result(subtrees_2))
    else if ruleno = // E let W = E E // 29 
    then tree("let"_1, [ result(subtrees_2), result(subtrees_4), result(subtrees_5)])
    else if ruleno = // E assert E report E E // 30 
    then tree("assert"_1, [ result(subtrees_2), result(subtrees_5), result(subtrees_4)])
    else if ruleno = // E I // 31 
    then result(subtrees_1)
    else if ruleno = // E I.I // 32 
    then let d = decode.label.result(subtrees_3)
     tree("makereal"_1, [ tree.encodeword(decode.label.result(subtrees_1)+ d), tree.countdigits(d, 1, 0)])
    else if ruleno = // T W // 33 
    then result(subtrees_1)
    else if ruleno = // T W.T // 34 
    then tree(label.result(subtrees_1), [ result(subtrees_3)])
    else if ruleno = // E W:T // 35 
    then tree.merge([ label.result(subtrees_1),":"_1]+ print.result(subtrees_3))
    else if ruleno = // E $wordlist // 36 
    then result(subtrees_1)
    else if ruleno = // E comment E // 37 
    then tree("comment"_1, [ result(subtrees_2)]+ sons.result(subtrees_1))
    else if ruleno = // N_// 38 
    then result(subtrees_1)
    else if ruleno = // N-// 39 
    then result(subtrees_1)
    else if ruleno = // N = // 40 
    then result(subtrees_1)
    else if ruleno = // N * // 41 
    then result(subtrees_1)
    else if ruleno = // N ∧ // 42 
    then result(subtrees_1)
    else if ruleno = // N ∨ // 43 
    then result(subtrees_1)
    else if ruleno = // K E // 44 
    then result(subtrees_1)
    else if ruleno = // K N // 45 
    then result(subtrees_1)
    else assert ruleno = // E @(K, K, E, E)// 46 report"invalid rule number"+ toword.ruleno 
    tree("@"_1, [ result(subtrees_3), result(subtrees_5), result(subtrees_7), result(subtrees_9)])
   let leftsidetoken = [ 32, 28, 28, 28, 28, 33, 33, 33, 33, 29, 
   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
   29, 29, 29, 29, 29, 34, 34, 29, 29, 29, 
   29, 29, 17, 17, 29, 29, 29, 31, 31, 31, 
   31, 31, 31, 36, 36, 29]_ruleno 
   let actioncode = actiontable_(leftsidetoken + length.tokenlist * stateno.top.newstk)
   assert actioncode > 0 report"??"
   push(newstk, stkele(actioncode, newtree))

