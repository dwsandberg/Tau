Module parsersupport.T

use seq.stkele.T

use stack.stkele.T

use otherseq.token.T

use otherseq.int

use stack.int

use pretty

use standard

use process.seq.word

Export type:stkele.T

Export type:reduction.T

Export type:token.T

type token is w:word, tokenno:int, attribute:T

type stkele is stateno:int, attribute:T

type reduction is toseq:seq.stkele.T

unbound attribute:T(seq.word) T

unbound action(int, seq.word, int, reduction.T, stack.stkele.T) T

unbound text(T) seq.word

unbound forward(stk:T, T) T

unbound errormessage(message:seq.word, input:seq.word, place:int, parsestk:stack.stkele.T) seq.word

Function >1(a:token.T, b:token.T) ordering w.a >1 w.b

Function =(a:token.T, b:token.T) boolean w.a = w.b

Function _(r:reduction.T, n:int) T attribute.(toseq.r)_n

Function last(r:reduction.T) T attribute.(toseq.r)_(length.toseq.r)

Function %(s:stkele.T) seq.word %.stateno.s

%.stateno.top.parsestk

Function errormessage:T(message:seq.word, input:seq.word, place:int, parsestk:stack.stkele.T) seq.word
let m = "<* literal $(message) *>",
if subseq(message, 1, 3) = "missing string terminator" then
 m + "/br" + input
else
 m + "/br"
 + for acc = empty:stack.int, x ∈ toseq.parsestk do
  push(acc, stateno.x)
 /do
  let action = recovery:T_(top.acc)
  let tail = 
   if action > 0 then
    recoverStep:T(acc, action, decodetoken:T(action))
   else
    recoverStep:T(acc, 0, "")
  let m2 = 
   if place > length.input then
    "/br At end of paragraph /br $(m)"
   else
    "/br $(m) /br part of unprocessed input: $(subseq(input, place + 1, place + 10))"
  ,
  if subseq(tail, 1, 1) = "problem" then
   tail + "/br failed problem" + %.toseq.acc + m2 + "/br" + input
  else
   let marker = if subseq(tail, 1, 1) = "I" then "99599"_1 else merge."! !"
   let tail2 = 
    if isempty.tail then
     tail
    else if first.tail ∈ ("E T W NM L FP D I" + marker) then
     [marker] + tail << 1
    else if first.tail ∈ "do report then else /for]" then
     "-" + marker + tail
    else if subseq(tail, 1, 3) ∈ ["-E do", "-E while"] then
     "∈" + marker + tail << 2
    else if first.tail ∈ "=" then
     "= $(marker) $(tail << 2)"
    else if first.tail ∈ "," then
     ", $(marker)-$(tail << 2)"
    else if subseq(tail, 1, 2) ∈ ["(FP", "(E"] then
     "(" + marker + tail << 2
    else if subseq(tail, 1, 2) ∈ [") T", ") E", ") $(dq)"] then
     ")" + marker + tail << 2
    else if first.tail ∈ ")" then
     "-$(marker)) $(tail << 1)"
    else if first.tail ∈ "/for" then "/for (" + marker + tail << 3 else tail
   ,
   if not.isempty.tail ∧ tail2 = tail then
    "failed unexpected first of tail $(tail)"
   else
    let p = process.pretty(subseq(input, 1, place) + tail2),
    if aborted.p then
     "failed recovery ?L
      /br $(subseq(input, 1, place)) %%%%%%% $(tail2 + "::" + tail)
      /br $(input) mess $(message.p) $(toseq.acc)
      /p"
    else
     {find location of maker in prettied input and remove input after marker and possibly some before}
     if isempty.tail2 then
      result.p + m2
     else
      for acc3 = "", skip = false, w ∈ result.p do
       if w = marker then
        if marker = first.tail2 then next(acc3, true) else next(removemore:T(tail2, acc3), true)
       else if skip ∧ w ∉ "*>" then next(acc3, skip) else next(acc3 + w, skip)
      /do acc3 + m2

Function removemore:T(tail2:seq.word, acc3:seq.word) seq.word
let hasblock = if subseq(acc3, length.acc3 - 1, length.acc3) = "<* block" then 2 else 0
let haswhite = 
 if acc3_(length.acc3 - hasblock) ∈ ("/br" + space) then hasblock + 1 else hasblock
let a = acc3 >> haswhite
let len = length.a,
if first.tail2 ∈ "/for" ∧ subseq(a, len - 1, len) = "/for (" then
 a << 2
else if first.tail2 ∈ "-" ∧ last.a ∈ "∈" then
 a << 1
else
 {if first.tail2 /in". ." /and last.a /in". ." then a << 1 else}
 if last.a = first.tail2 then
  a << 1
 else if subseq(tail2, 1, 2) = ") !!" then
  {ignore close para} a
 else
  a + "failed $(haswhite)"
  + for acc = "", x ∈ tail2 + "??" + subseq(a, len - 4, len) do
   acc + encodeword([char.0] + decodeword.x)
  /do acc /for
 /if
 + if hasblock = 1 then "<* block" else ""

Function parse:T(initial:T, lextable:seq.token.T, input:seq.word, headeronly:boolean) T
let stringtoken = findindex(tokenlist:T, "$wordlist"_1)
let wlendtoken = findindex(tokenlist:T, "wlend"_1)
let commenttoken = findindex(tokenlist:T, "comment"_1)
let codeinstringtoken = findindex(tokenlist:T, "wl"_1)
let lastrule = if headeronly then 24 else length.rulelength:T + 1,
for state = ""
 , lrpart = push(empty:stack.stkele.T, stkele(startstate:T, initial))
 , last = 0
 , idx = 1
 , this ∈ input + "#"
while stateno.top.lrpart ≠ -1
do
 if {in code} isempty.state ∨ first.state ∈ ")" ∧ not(this ∈ ")" ∧ state_2 ∈ dq) then
  if this ∈ "{" then
   next("} $(state)", lrpart, idx, idx + 1)
  else if this ∈ dq then
   next(dq + state, lrpart, idx, idx + 1)
  else
   assert true ∨ this ∉ "}" report errormessage("stray}", input, idx, lrpart)
   let lexindex = binarysearch(lextable, token(this, 0, attribute:T("")))
   let tokenno = 
    if lexindex < 0 then
     {this is not in lex table}
     let kind = checkinteger.this,
     if kind = "WORD"_1 then
      Wtoken:T
     else
      assert kind ≠ "ILLEGAL"_1 report "Illegal character in Integer" + this,
      Itoken:T
    else
     tokenno.lextable_lexindex
   let att = if lexindex < 0 then attribute:T([this]) else attribute.lextable_lexindex
   let newlrpart = step(lrpart, input, att, tokenno, idx - 1, lastrule)
   let newstate = 
    if isempty.state then
     state
    else if this ∈ "(" then ") $(state)" else if this ∈ ")" then state << 1 else state
   ,
   next(newstate, newlrpart, idx, idx + 1)
 else
  let kind = 
   if first.state ∈ dq ∧ this ∈ "(" ∧ input_(idx - 1) = "$"_1 then
    codeinstringtoken
   else if first.state ∈ dq ∧ this ∈ dq then
    if subseq(input, last, last) = dq then stringtoken else wlendtoken
   else if first.state ∈ "}" ∧ this ∈ "}" ∧ subseq(state, 2, 2) ≠ "}" then
    commenttoken
   else
    0
  let newlrpart = 
   if kind = 0 then
    lrpart
   else
    step(lrpart
     , input
     , attribute:T(subseq(input, last, if kind = codeinstringtoken then idx - 1 else idx))
     , {tokenno} kind
     , last - 1
     , lastrule)
  ,
  if kind ∈ [commenttoken, stringtoken, wlendtoken]
  ∨ this ∈ ")" ∧ subseq(state, 1, 2) = ") $(dq)" then
   next(state << 1, newlrpart, idx, idx + 1)
  else if kind = codeinstringtoken then
   next(") $(state)", newlrpart, idx, idx + 1)
  else
   {in string or comment.}
   let newstate = 
    if first.state ∈ dq then
     state
    else if this ∈ "{" then "} $(state)" else if this ∈ "}" then state << 1 else state
   ,
   next(newstate, lrpart, last, idx + 1)
/do
 let r = toseq.lrpart
 assert isempty.state ∨ headeronly
 report errormessage("missing string terminator $(state)", input, idx, lrpart),
 attribute.r_min(length.r, 2)

function step(stk:stack.stkele.T
 , input:seq.word
 , attrib:T
 , tokenno:int
 , place:int
 , lastrule:int) stack.stkele.T
let stateno = stateno.top.stk
let actioncode = actiontable:T_(tokenno + length.tokenlist:T * stateno),
if actioncode > 0 then
 push(stk, stkele(actioncode, forward(attribute.top.stk, attrib)))
else
 assert actioncode < 0 report errormessage("syntax error", input, place, stk)
 let ruleno = -actioncode
 let rulelen = rulelength:T_ruleno
 let leftside = action(ruleno, input, place, reduction.top(stk, rulelen), stk)
 let newstk = pop(stk, rulelen),
 if ruleno ≥ lastrule then
  push(newstk, stkele(-1, leftside))
 else
  let newstateno = actiontable:T_(leftside:T_ruleno + length.tokenlist:T * stateno.top.newstk)
  assert newstateno > 0 report "???"
  let newstkele = stkele(newstateno, leftside),
  step(push(newstk, newstkele), input, attrib, tokenno, place, lastrule)

function recoverStep:T(stk:stack.int, tokenno:int, list:seq.word) seq.word
let actioncode = 
 if tokenno = 0 then 0 else actiontable:T_(tokenno + length.tokenlist:T * top.stk)
,
if actioncode > 0 then
 {shift} recoverStep:T(push(stk, actioncode), 0, list)
else if actioncode < 0 then
 {reduce}
 recoverStep:T(pop(stk, rulelength:T_(-actioncode)), leftside:T_(-actioncode), list)
else
 let action2 = recovery:T_(top.stk),
 if action2 > 0 then
  {shift}
  if tokenlist:T_action2 ∈ "#" then
   list
  else
   recoverStep:T(stk, action2, list + decodetoken:T(action2))
 else if action2 = 0 then
  "problem $(tokenno) $(toseq.stk) $(list)"
 else
  let leftside = leftside:T_(-action2),
  {reduce} recoverStep:T(pop(stk, rulelength:T_(-action2)), leftside, list)

function decodetoken:T(token:int) seq.word
let t = tokenlist:T_token,
if t ∈ "F2" then
 "W = W, W ∈ W"
else if t ∈ "A" then "W = W" else if t ∈ "wlend" then ") $(dq)" else [t]

Function sortedlextable:T seq.token.T sort.lextable:T

function lextable:T seq.token.T
{generated by genlex module in tools}
[token("#"_1, 19, attribute:T("#"))
 , token("("_1, 3, attribute:T("("))
 , token(")"_1, 4, attribute:T(")"))
 , token("*"_1, 10, attribute:T("*"))
 , token("+"_1, 8, attribute:T("+"))
 , token(","_1, 12, attribute:T(","))
 , token("-"_1, 8, attribute:T("-"))
 , token("."_1, 1, attribute:T("."))
 , token(". "_1, 1, attribute:T("."))
 , token("/"_1, 10, attribute:T("/"))
 , token("/for"_1, 29, attribute:T("/for"))
 , token("/if"_1, 15, attribute:T("/if"))
 , token("0"_1, 17, attribute:T("0"))
 , token("2"_1, 17, attribute:T("2"))
 , token(":"_1, 5, attribute:T(":"))
 , token("<"_1, 6, attribute:T("<"))
 , token("<<"_1, 10, attribute:T("<<"))
 , token("="_1, 2, attribute:T("="))
 , token(">"_1, 6, attribute:T(">"))
 , token(">1"_1, 6, attribute:T(">1"))
 , token(">2"_1, 6, attribute:T(">2"))
 , token(">>"_1, 10, attribute:T(">>"))
 , token("Function"_1, 30, attribute:T("Function"))
 , token("I"_1, 17, attribute:T("I"))
 , token("T"_1, 30, attribute:T("T"))
 , token("W"_1, 30, attribute:T("W"))
 , token("["_1, 13, attribute:T("["))
 , token("\"_1, 10, attribute:T("\"))
 , token("]"_1, 7, attribute:T("]"))
 , token("^"_1, 14, attribute:T("^"))
 , token("_"_1, 14, attribute:T("_"))
 , token("a"_1, 30, attribute:T("a"))
 , token("assert"_1, 23, attribute:T("assert"))
 , token("do"_1, 31, attribute:T("do"))
 , token("else"_1, 21, attribute:T("else"))
 , token("empty"_1, 30, attribute:T("empty"))
 , token("for"_1, 9, attribute:T("for"))
 , token("function"_1, 30, attribute:T("function"))
 , token("i"_1, 30, attribute:T("i"))
 , token("if"_1, 18, attribute:T("if"))
 , token("in"_1, 30, attribute:T("in"))
 , token("inst"_1, 30, attribute:T("inst"))
 , token("int"_1, 30, attribute:T("int"))
 , token("is"_1, 16, attribute:T("is"))
 , token("let"_1, 22, attribute:T("let"))
 , token("mod"_1, 10, attribute:T("mod"))
 , token("mytype"_1, 30, attribute:T("mytype"))
 , token("report"_1, 24, attribute:T("report"))
 , token("seq"_1, 30, attribute:T("seq"))
 , token("then"_1, 20, attribute:T("then"))
 , token("use"_1, 30, attribute:T("use"))
 , token("while"_1, 28, attribute:T("while"))
 , token("wlend"_1, 33, attribute:T("wlend"))
 , token("word"_1, 30, attribute:T("word"))
 , token("∈"_1, 8, attribute:T("∈"))
 , token("∉"_1, 8, attribute:T("∉"))
 , token("∧"_1, 25, attribute:T("∧"))
 , token("∨"_1, 26, attribute:T("∨"))
 , token("∩"_1, 10, attribute:T("∩"))
 , token("∪"_1, 10, attribute:T("∪"))
 , token("≠"_1, 6, attribute:T("≠"))
 , token("≤"_1, 6, attribute:T("≤"))
 , token("≥"_1, 6, attribute:T("≥"))
 , token("⊻"_1, 26, attribute:T("⊻"))
 , token(dq_1, 27, attribute:T(dq))
 , token(merge."/ and", 25, attribute:T("∧"))
 , token(merge."/ cap", 10, attribute:T("∩"))
 , token(merge."/ cup", 10, attribute:T("∪"))
 , token(merge."/ do", 34, attribute:T("/do"))
 , token(merge."/ ge", 6, attribute:T("≥"))
 , token(merge."/ in", 8, attribute:T("∈"))
 , token(merge."/ le", 6, attribute:T("≤"))
 , token(merge."/ ne", 6, attribute:T("≠"))
 , token(merge."/ nin", 8, attribute:T("∉"))
 , token(merge."/ or", 26, attribute:T("∨"))
 , token(merge."/ xor", 8, attribute:T("⊻"))]

function Wtoken:T int {generated by genlex module in tools} 30

function Itoken:T int {generated by genlex module in tools} 17

function rulelength:T seq.int
[2, 1, 2, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 1, 3, 3, 5, 4, 6, 1, 3, 1, 3, 1, 4
 , 3, 3, 4, 3, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 4, 1, 4, 1, 3, 1, 2, 3, 5, 5
 , 3, 5, 5, 2, 3, 2, 2, 3, 1, 2, 4, 1, 4, 3]

function leftside:T seq.int
[44, 44, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 40, 40, 40, 40, 40, 40, 41
 , 41, 35, 35, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 42, 42, 39
 , 43, 38, 43, 39, 39, 39, 39, 45, 45, 37, 48, 48, 39, 36, 36, 39, 46, 49, 49, 38
 , 50, 43, 39, 49]

function tokenlist:T seq.word
".= ():>]-for * comment, [_/if is I if # then else let assert report ∧ ∨ $wordlist while /for W do
 wl wlend /do T X F2 A E FP NM L D F F1 G HH F3 E2 EI"

function startstate:T int 1

function finalstate:T int 14

function recovery:T seq.int
[{1}-0, {2 NM} 41, {3 #} 19, {4}-2, {5 (} 3
 , {6 (} 3, {7 (} 3, {8}-20, {9 (} 3, {10 (} 3
 , {11 (} 3, {12 (} 3, {13 T} 35, {14}-57, {15}-62
 , {16 W} 30, {17 F3} 48, {18 E} 39, {19}-46, {20 E} 39
 , {21}-20, {22 E} 39, {23 E} 39, {24 E} 39, {25}-44
 , {26 L} 42, {27 wlend} 33, {28,} 12, {29}-59, {30}-24
 , {31}-42, {32}-1, {33 else} 21, {34 FP} 40, {35 FP} 40
 , {36 FP} 40, {37 T} 35, {38 FP} 40, {39 FP} 40, {40 FP} 40
 , {41 FP} 40, {42 FP} 40, {43}-12, {44}-22, {45 FP} 40
 , {46 E} 39, {47}-47, {48 =} 2, {49 =} 2, {50 do} 31
 , {51,} 12, {52 /do} 34, {53}-54, {54 report} 24, {55 E} 39
 , {56}-30, {57 then} 20, {58)} 4, {59 I} 17, {60}-38
 , {61]} 7, {62 E} 39, {63}-56, {64}-62, {65 E} 39
 , {66 E} 39, {67}-60, {68 E} 39, {69 E} 39, {70 E} 39
 , {71 E} 39, {72 E} 39, {73 E} 39, {74 E} 39, {75 L} 42
 , {76 E2} 49, {77 W} 30, {78}-14, {79}-22, {80)} 4
 , {81)} 4, {82)} 4, {83}-21, {84)} 4, {85)} 4
 , {86)} 4, {87)} 4, {88}-13, {89 T} 35, {90)} 4
 , {91 E} 39, {92 E} 39, {93 E2} 49, {94 E} 39, {95 W} 30
 , {96 E2} 49, {97 E2} 49, {98}-31, {99 E2} 49, {100}-26
 , {101}-45, {102}-40, {103 E} 39, {104}-55, {105}-64
 , {106}-58, {107}-32, {108}-34, {109}-35, {110}-33
 , {111}-36, {112}-37, {113}-29, {114)} 4, {115}-62
 , {116}-27, {117:} 5, {118 T} 35, {119 T} 35, {120 T} 35
 , {121 T} 35, {122 T} 35, {123 T} 35, {124 T} 35, {125 T} 35
 , {126 T} 35, {127}-23, {128 T} 35, {129}-41, {130}-48
 , {131}-51, {132 do} 31, {133-} 8, {134}-63, {135}-43
 , {136}-61, {137}-39, {138}-25, {139}-28, {140 T} 35
 , {141}-16, {142}-9, {143 W} 30, {144}-15, {145}-22
 , {146}-7, {147}-8, {148}-6, {149}-10, {150}-11
 , {151}-5, {152}-4, {153 E2} 49, {154 E} 39, {155 E} 39
 , {156}-53, {157}-18, {158:} 5, {159 T} 35, {160}-52
 , {161}-49, {162}-50, {163 T} 35, {164}-17, {165}-19]

function actiontable:T seq.int
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0
 , 7, 0, 9, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 10, 11, 0, 0, 0, 8, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 15, 0, 26, 0, 0, 0, 25, 23,-2, 0, 0, 16, 20, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 28, 29, 0
 , 30, 0, 31, 0, 0, 0, 0, 0, 32, 33, 0, 0, 34, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-20,-20,-20, 37
 ,-20,-20,-20, 0,-20,-20,-20, 0,-20,-20,-20, 0, 0,-20,-20
 ,-20,-20,-20,-20,-20,-20, 0,-20,-20,-20,-20,-20,-20,-20, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 44, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-3, 0, 0, 0, 0,-3,-3, 0,-3,-62,-3, 0, 0
 , 0,-3,-3,-3, 0, 0,-3,-3, 0, 0, 0,-3, 0, 0,-3
 ,-62,-3, 0, 0, 0, 27, 0, 0, 47, 0, 30, 0, 0, 0, 0
 , 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0
 , 0, 50, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 52, 0, 0
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 46, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 0, 53, 0, 30, 0, 0, 0, 0
 , 0, 0, 0, 0, 33, 0,-46, 0,-46, 0,-46,-46,-46, 0,-46
 ,-46,-46, 0,-46,-46, 0, 0, 0,-46,-46,-46,-46,-46,-46,-46
 ,-46, 0,-46,-46, 0,-46,-46,-46,-46, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 54, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 55,-20,-20,-20, 37,-20,-20,-20, 0,-20,-20,-20, 0,-20,-20
 ,-20, 0, 0,-20,-20,-20,-20,-20,-20,-20,-20, 0,-20,-20,-20
 ,-20,-20,-20,-20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 56, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 57, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 46, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 0, 58, 0, 30, 0, 0, 0, 0
 , 0, 0, 0, 0, 33, 59,-44, 0,-44, 0,-44,-44,-44, 0,-44
 ,-44,-44, 0,-44,-44, 0, 0, 0,-44,-44,-44,-44,-44,-44,-44
 ,-44, 0,-44,-44, 0,-44,-44,-44,-44, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 60, 0, 30, 61, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 62, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 0, 0
 , 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0,-59, 0
 , 70,-59, 71, 0, 68,-59,-59, 0, 74,-59, 0, 0, 0,-59,-59
 ,-59,-59,-59,-59, 72, 73, 0,-59,-59, 0,-59,-59,-59,-59, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0,-24, 75,-24, 0,-24,-24,-24, 0,-24,-24,-24, 0,-24,-24
 , 0, 0, 0,-24,-24,-24,-24,-24,-24,-24,-24, 0,-24,-24, 0
 ,-24,-24,-24,-24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 ,-42,-42, 0, 0, 0, 0, 0, 0, 0, 0, 0,-42,-42, 0, 0
 , 0, 0, 0, 0, 0,-42, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 79, 0, 0, 0, 0, 78, 0, 0, 0, 0, 80
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 78
 , 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79
 , 0, 0, 0, 0, 78, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 44, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 78
 , 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79
 , 0, 0, 0, 0, 78, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 79, 0, 0, 0, 0, 78, 0, 0, 0, 0, 86
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 78
 , 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79
 , 0, 0, 0, 0, 78, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0,-12, 0, 0, 0, 0,-12,-12, 0
 ,-12, 0,-12, 0, 0, 0,-12,-12,-12, 0, 0,-12,-12, 0, 0
 , 0,-12, 0, 0,-12, 0,-12, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89,-22,-22,-22, 0
 ,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22
 ,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79
 , 0, 0, 0, 0, 78, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 47, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0,-47, 0,-47, 0
 ,-47,-47,-47, 0,-47,-47,-47, 0,-47,-47, 0, 0, 0,-47,-47
 ,-47,-47,-47,-47,-47,-47, 0,-47,-47, 0,-47,-47,-47,-47, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 93, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0
 , 70, 0, 71, 0, 68, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 0,-54,-54, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0, 0, 0, 70, 0, 71, 0, 68, 0, 0, 0, 74, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 97, 72, 73, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 98, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0,-30, 0,-30, 0
 ,-30,-30,-30, 0,-30,-30,-30, 0, 74,-30, 0, 0, 0,-30,-30
 ,-30,-30,-30,-30,-30,-30, 0,-30,-30, 0,-30,-30,-30,-30, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0, 0, 0, 70, 0, 71, 0, 68, 0, 0, 0, 74, 0
 , 0, 0, 0, 0, 99, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 69, 0, 100, 0, 70, 0, 71, 0, 68
 , 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72
 , 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0,-38, 0, 70,-38, 71, 0, 68, 0,-38, 0, 74, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0
 , 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 104, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0,-56, 0,-56, 0,-56,-56,-56, 0,-56,-56,-56, 0,-56,-56
 , 0, 0, 0,-56,-56,-56,-56,-56,-56,-56,-56, 0,-56,-56, 0
 ,-56,-56,-56,-56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 ,-62,-62, 0, 0, 0, 0, 0, 0, 0, 0, 0,-62,-62, 0, 0
 , 0, 0, 0, 0, 0,-62, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 105, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 46, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 0, 106, 0, 30, 0, 0, 0, 0
 , 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 ,-60,-60, 0, 0, 0, 0, 0, 0, 0, 0, 0,-60,-60, 0, 0
 , 0, 0, 0, 0, 0,-60, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 107, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 46, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 0, 108, 0, 30, 0, 0, 0, 0
 , 0, 0, 0, 0, 33, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 109, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 110, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 46, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 0, 111, 0, 30, 0, 0, 0, 0
 , 0, 0, 0, 0, 33, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 112, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 113, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 46, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 0, 60, 0, 30, 114, 0, 0, 0
 , 0, 0, 0, 0, 33, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 115, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 28, 29, 0
 , 30, 0, 31, 0, 0, 0, 0, 0, 116, 33, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-14,-14, 0, 0, 0,-14,-14, 0,-14,-14,-14, 0, 0
 , 0,-14,-14,-14, 0, 0,-14,-14, 0, 0, 0,-14, 0, 0,-14
 , 0,-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 89,-22,-22,-22, 118,-22,-22,-22,-22,-22
 ,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22
 ,-22,-22,-22,-22,-22,-22,-22,-22,-22, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0
 , 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0
 , 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-21,-21,-21, 0
 ,-21,-21,-21, 0,-21,-21,-21, 0,-21,-21,-21, 0, 0,-21,-21
 ,-21,-21,-21,-21,-21,-21, 0,-21,-21,-21,-21,-21,-21,-21, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0
 , 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0
 , 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0,-13, 0, 0, 0, 0,-13,-13, 0
 ,-13, 120,-13, 0, 0, 0,-13,-13,-13, 0, 0,-13,-13, 0, 0
 , 0,-13, 0, 0,-13, 0,-13, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 127
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 129, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 130, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 115, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 28, 29, 0, 30, 0, 31, 0, 0
 , 0, 0, 0, 131, 33, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 132, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 115, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 28, 29, 0, 30, 0, 31, 0, 0
 , 0, 0, 0, 134, 33, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 115, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 28, 29, 0
 , 30, 0, 31, 0, 0, 0, 0, 0, 135, 33, 0,-31, 0,-31, 0
 ,-31,-31,-31, 0,-31,-31,-31, 0, 74,-31, 0, 0, 0,-31,-31
 ,-31,-31,-31,-31,-31,-31, 0,-31,-31, 0,-31,-31,-31,-31, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 115, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 28, 29, 0, 30, 0, 31, 0, 0
 , 0, 0, 0, 136, 33, 0,-26, 0,-26, 0,-26,-26,-26, 0,-26
 ,-26,-26, 0,-26,-26, 0, 0, 0,-26,-26,-26,-26,-26,-26,-26
 ,-26, 0,-26,-26, 0,-26,-26,-26,-26, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-45, 0,-45, 0
 ,-45,-45,-45, 0,-45,-45,-45, 0,-45,-45, 0, 0, 0,-45,-45
 ,-45,-45,-45,-45,-45,-45, 0,-45,-45, 0,-45,-45,-45,-45, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0,-40, 0,-40, 0,-40,-40,-40, 0,-40,-40,-40, 0,-40,-40
 , 0, 0, 0,-40,-40,-40,-40,-40,-40,-40,-40, 0,-40,-40, 0
 ,-40,-40,-40,-40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 137, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 69, 0, 0, 0
 , 70, 0, 71, 0, 68, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 0,-55,-55, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0,-64, 0, 70,-64, 71, 0, 68,-64,-64, 0, 74,-64
 , 0, 0, 0,-64,-64,-64,-64,-64,-64, 72, 73, 0,-64,-64, 0
 ,-64,-64,-64,-64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 69, 0,-58, 0, 70,-58, 71, 0, 68
 ,-58,-58, 0, 74,-58, 0, 0, 0,-58,-58,-58,-58,-58,-58, 72
 , 73, 0,-58,-58, 0,-58,-58,-58,-58, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-32, 0,-32, 0
 ,-32,-32,-32, 0,-32,-32,-32, 0, 74,-32, 0, 0, 0,-32,-32
 ,-32,-32,-32,-32,-32,-32, 0,-32,-32, 0,-32,-32,-32,-32, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0,-34, 0,-34, 0,-34,-34, 71, 0, 68,-34,-34, 0, 74,-34
 , 0, 0, 0,-34,-34,-34,-34,-34,-34,-34,-34, 0,-34,-34, 0
 ,-34,-34,-34,-34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0,-35, 0,-35, 0,-35,-35, 71, 0, 68
 ,-35,-35, 0, 74,-35, 0, 0, 0,-35,-35,-35,-35,-35,-35,-35
 ,-35, 0,-35,-35, 0,-35,-35,-35,-35, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-33, 0,-33, 0
 ,-33,-33,-33, 0, 68,-33,-33, 0, 74,-33, 0, 0, 0,-33,-33
 ,-33,-33,-33,-33,-33,-33, 0,-33,-33, 0,-33,-33,-33,-33, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0,-36, 0, 70,-36, 71, 0, 68,-36,-36, 0, 74,-36
 , 0, 0, 0,-36,-36,-36,-36,-36,-36,-36,-36, 0,-36,-36, 0
 ,-36,-36,-36,-36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 69, 0,-37, 0, 70,-37, 71, 0, 68
 ,-37,-37, 0, 74,-37, 0, 0, 0,-37,-37,-37,-37,-37,-37, 72
 ,-37, 0,-37,-37, 0,-37,-37,-37,-37, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-29, 0,-29, 0
 ,-29,-29,-29, 0,-29,-29,-29, 0,-29,-29, 0, 0, 0,-29,-29
 ,-29,-29,-29,-29,-29,-29, 0,-29,-29, 0,-29,-29,-29,-29, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46,-62, 26, 0, 0, 0, 25, 23, 0, 0, 0,-62,-62, 0, 0
 , 0, 19, 0, 0, 21,-62, 18, 0, 0, 0, 27, 0, 0, 47, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0,-27, 0,-27, 0
 ,-27,-27,-27, 0,-27,-27,-27, 0,-27, 139, 0, 0, 0,-27,-27
 ,-27,-27,-27,-27,-27,-27, 0,-27,-27, 0,-27,-27,-27,-27, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 44, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 142
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145
 , 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 44, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 147
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44
 , 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 44, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 150
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44
 , 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0,-23,-23,-23, 0,-23,-23,-23,-23,-23
 ,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23
 ,-23,-23,-23,-23,-23,-23,-23,-23,-23, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 152
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0, 0, 0, 70, 0, 71, 0, 68,-41,-41, 0, 74, 0
 , 0, 0, 0, 0, 0, 0,-41,-41, 0, 72, 73, 0, 0, 0, 0
 ,-41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 70, 0, 71, 0, 68
 , 0,-48, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72
 , 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-51, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0, 0, 0, 70, 0, 71, 0, 68, 0, 0, 0, 74, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0
 , 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 155, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-63, 0,-63, 0
 ,-63,-63,-63, 0,-63,-63,-63, 0,-63,-63, 0, 0, 0,-63,-63
 ,-63,-63,-63,-63,-63,-63, 0,-63, 156, 0,-63,-63,-63,-63, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-43,-43, 0, 0, 0
 , 0, 0, 0, 0, 0, 0,-43,-43, 0, 0, 0, 0, 0, 0, 0
 ,-43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-61, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0,-39, 0
 , 70,-39, 71, 0, 68, 0,-39, 0, 74, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0,-25, 0,-25, 0,-25,-25,-25, 0,-25,-25,-25, 0,-25,-25
 , 0, 0, 0,-25,-25,-25,-25,-25,-25,-25,-25, 0,-25,-25, 0
 ,-25,-25,-25,-25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0,-28, 0,-28, 0,-28,-28,-28, 0,-28
 ,-28,-28, 0,-28,-28, 0, 0, 0,-28,-28,-28,-28,-28,-28,-28
 ,-28, 0,-28,-28, 0,-28,-28,-28,-28, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 157
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-16,-16, 0, 0, 0,-16,-16, 0,-16,-16,-16, 0, 0
 , 0,-16,-16,-16, 0, 0,-16,-16, 0, 0, 0,-16, 0, 0,-16
 , 0,-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0,-9, 0, 0, 0, 0,-9,-9, 0
 ,-9, 0,-9, 0, 0, 0,-9,-9,-9, 0, 0,-9,-9, 0, 0
 , 0,-9, 0, 0,-9, 0,-9, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-15,-15, 0, 0, 0,-15,-15, 0,-15,-15,-15, 0, 0
 , 0,-15,-15,-15, 0, 0,-15,-15, 0, 0, 0,-15, 0, 0,-15
 , 0,-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 89,-22,-22,-22, 159,-22,-22,-22,-22,-22
 ,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22
 ,-22,-22,-22,-22,-22,-22,-22,-22,-22, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-7, 0, 0
 , 0, 0,-7,-7, 0,-7, 0,-7, 0, 0, 0,-7,-7,-7, 0
 , 0,-7,-7, 0, 0, 0,-7, 0, 0,-7, 0,-7, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-8, 0, 0, 0, 0,-8,-8, 0,-8, 0,-8, 0, 0
 , 0,-8,-8,-8, 0, 0,-8,-8, 0, 0, 0,-8, 0, 0,-8
 , 0,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0,-6, 0, 0, 0, 0,-6,-6, 0
 ,-6, 0,-6, 0, 0, 0,-6,-6,-6, 0, 0,-6,-6, 0, 0
 , 0,-6, 0, 0,-6, 0,-6, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-10, 0, 0
 , 0, 0,-10,-10, 0,-10, 0,-10, 0, 0, 0,-10,-10,-10, 0
 , 0,-10,-10, 0, 0, 0,-10, 0, 0,-10, 0,-10, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-11, 0, 0, 0, 0,-11,-11, 0,-11, 0,-11, 0, 0
 , 0,-11,-11,-11, 0, 0,-11,-11, 0, 0, 0,-11, 0, 0,-11
 , 0,-11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0,-5, 0, 0, 0, 0,-5,-5, 0
 ,-5, 0,-5, 0, 0, 0,-5,-5,-5, 0, 0,-5,-5, 0, 0
 , 0,-5, 0, 0,-5, 0,-5, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-4, 0, 0
 , 0, 0,-4,-4, 0,-4, 0,-4, 0, 0, 0,-4,-4,-4, 0
 , 0,-4,-4, 0, 0, 0,-4, 0, 0,-4, 0,-4, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 115, 0, 26, 0, 0
 , 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
 , 0, 18, 0, 0, 0, 27, 0, 28, 29, 0, 30, 0, 31, 0, 0
 , 0, 0, 0, 160, 33, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0
 , 46, 0, 26, 0, 0, 0, 25, 23, 0, 0, 0, 0, 0, 0, 0
 , 0, 19, 0, 0, 21, 0, 18, 0, 0, 0, 27, 0, 0, 161, 0
 , 30, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 24, 0, 0
 , 0, 0, 22, 17, 0, 46, 0, 26, 0, 0, 0, 25, 23, 0, 0
 , 0, 0, 0, 0, 0, 0, 19, 0, 0, 21, 0, 18, 0, 0, 0
 , 27, 0, 0, 162, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 33
 , 0,-53, 0,-53, 0,-53,-53,-53, 0,-53,-53,-53, 0,-53,-53
 , 0, 0, 0,-53,-53,-53,-53,-53,-53,-53,-53, 0,-53,-53, 0
 ,-53,-53,-53,-53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0,-18,-18, 0, 0, 0,-18,-18, 0
 ,-18,-18,-18, 0, 0, 0,-18,-18,-18, 0, 0,-18,-18, 0, 0
 , 0,-18, 0, 0,-18, 0,-18, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44
 , 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0,-52, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0
 , 70, 0, 71, 0, 68, 0,-49, 0, 74, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 69, 0, 0, 0, 70, 0, 71, 0, 68, 0, 0, 0, 74, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 73, 0,-50, 0, 0
 ,-50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 44, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-17,-17, 0
 , 0, 0,-17,-17, 0,-17,-17,-17, 0, 0, 0,-17,-17,-17, 0
 , 0,-17,-17, 0, 0, 0,-17, 0, 0,-17, 0,-17, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0,-19,-19, 0, 0, 0,-19,-19, 0,-19,-19,-19, 0, 0
 , 0,-19,-19,-19, 0, 0,-19,-19, 0, 0, 0,-19, 0, 0,-19
 , 0,-19] 