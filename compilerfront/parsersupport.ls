Module parsersupport.T

use seq.stkele.T

use stack.stkele.T

use otherseq.token.T

use format

use stack.int

use standard

use set.word

Export type:stkele.T

Export type:reduction.T

Export type:token.T

type token is w:word, tokenno:int, attribute:T

type stkele is stateno:int, attribute:T

type reduction is toseq:seq.stkele.T

unbound attribute:T(seq.word) T

unbound action(int, seq.word, int, reduction.T, stack.stkele.T) T

unbound text(T) seq.word

unbound forward(stk:T, T) T

Function >1(a:token.T, b:token.T) ordering w.a >1 w.b

Function =(a:token.T, b:token.T) boolean w.a = w.b

Function _(r:reduction.T, n:int) T attribute.(toseq.r)_n

Function last(r:reduction.T) T attribute.(toseq.r)_(length.toseq.r)

Function errormessage:T(message:seq.word, input:seq.word, place:int, parsestk:stack.stkele.T) seq.word
 let p=process.errormessageX:T(message,input,place,parsestk)
 if aborted.p then "KKKK"+message+"/p"+input+stacktrace
 else result.p

function errormessageX:T(message:seq.word, input:seq.word, place:int, parsestk:stack.stkele.T) seq.word
let m = "/fmt literal $(message) /end"
m + "/br"
+ for acc = empty:stack.int, x ∈ toseq.parsestk do
 push(acc, stateno.x)
/for (
 let action = recovery:T_(top.acc)
 let tail = 
  if action > 0 then recoverStep:T(acc, action, decodetoken:T(action))
  else recoverStep:T(acc, 0, "")
 let m2 = 
  if place > length.input then "/br At end of paragraph /br $(m)"
  else "/br part of unprocessed input: $(subseq(input, place + 1, place + 10)) /br $(m)"
 if subseq(tail, 1, 1) = "problem" then
  tail + "/br" + %.toseq.acc + m2 + "/br" + input
 else
  let terminators = 
   if subseq(message, 1, 3) = "missing string terminator" then message << 3
   else ""
  let p = process.pretty(subseq(input, 1, place) + tail)
  if aborted.p then "failed recovery /br $(subseq(input, 1, place)) $(tail)"
  else result.p + m2)

use pretty

use process.seq.word

Function parse:T(initial:T, lextable:seq.token.T, input:seq.word, headeronly:boolean) T
let stringtoken = findindex(tokenlist:T, "$wordlist"_1)
let commenttoken = findindex(tokenlist:T, "comment"_1)
let codeinstringtoken = findindex(tokenlist:T, "wl"_1)
let lastrule = if headeronly then 24 else 57
for state = ""
, lrpart = push(empty:stack.stkele.T, stkele(startstate:T, initial))
, last = 0
, lastplace = 0
, idx = 1
, this ∈ input + "#"
while stateno.top.lrpart ≠ -1
do
 if {in code} isempty.state
 ∨ first.state ∈ ")" ∧ not(this ∈ ")" ∧ state_2 ∈ dq) then
  if this ∈ "{" then next("} $(state)", lrpart, idx, lastplace, idx + 1)
  else if this ∈ dq then next(dq + state, lrpart, idx, lastplace, idx + 1)
  else
   assert this ∉ "}" report "stray}"
   let lexindex = binarysearch(lextable, token(this, 0, attribute:T("")))
   let newlrpart = 
    let tokenno = 
     if lexindex < 0 then
      {this is not in lex table}
      let kind = checkinteger.this
      if kind = "WORD"_1 then Wtoken:T
      else
       assert kind ≠ "ILLEGAL"_1 report "Illegal character in Integer" + this
       Itoken:T
     else tokenno.lextable_lexindex
    let att = if lexindex < 0 then attribute:T([this]) else attribute.lextable_lexindex
    step(lrpart, input, att, tokenno, lastplace, idx, lastrule)
   let newstate = 
    if isempty.state then state
    else if this ∈ "(" then ") $(state)"
    else if this ∈ ")" then state << 1 else state
   next(newstate, newlrpart, idx, idx, idx + 1)
 else
  let kind = 
   if first.state ∈ dq ∧ this ∈ "(" ∧ input_(idx - 1) = "$"_1 then
    codeinstringtoken
   else if first.state ∈ dq ∧ this ∈ dq then stringtoken
   else if first.state ∈ "}" ∧ this ∈ "}" ∧ subseq(state, 2, 2) ≠ "}" then
    commenttoken
   else 0
  let newlrpart = 
   if kind = 0 then lrpart
   else
    step(lrpart
    , input
    , attribute:T(subseq(input, last, if kind = codeinstringtoken then idx - 1 else idx))
    , {tokenno} kind
    , lastplace
    , last - 1
    , lastrule
    )
  if kind ∈ [commenttoken, stringtoken]
  ∨ this ∈ ")" ∧ subseq(state, 1, 2) = ") $(dq)" then
   next(state << 1, newlrpart, idx, last - 1, idx + 1)
  else if kind = codeinstringtoken then
   next(") $(state)", newlrpart, idx, last - 1, idx + 1)
  else
   {in string or comment.}
   let newstate = 
    if first.state ∈ dq then state
    else if this ∈ "{" then "} $(state)"
    else if this ∈ "}" then state << 1 else state
   next(newstate, lrpart, last, lastplace, idx + 1)
/for (
 let r = toseq.lrpart
 assert isempty.state ∨ length.r > 1
 report errormessage:T("missing string terminator $(state)", input, lastplace, lrpart)
 attribute.r_min(length.r, 2))

use otherseq.int

function step(stk:stack.stkele.T
, input:seq.word
, attrib:T
, tokenno:int
, place:int
, place2:int
, lastrule:int
) stack.stkele.T
let stateno = stateno.top.stk
let actioncode = actiontable:T_(tokenno + length.tokenlist:T * stateno)
if actioncode > 0 then push(stk, stkele(actioncode, forward(attribute.top.stk, attrib)))
else
 assert actioncode < 0 report errormessage:T("syntax error", input, place, stk)
 {+" /br"+expect:T (stateno)}
 let ruleno = -actioncode
 let rulelen = rulelength:T_ruleno
 let leftside = action(ruleno, input, place2 - 1, reduction.top(stk, rulelen), stk)
 let newstk = pop(stk, rulelen)
 if ruleno ≥ lastrule then push(newstk, stkele(-1, leftside))
 else
  let newstateno = actiontable:T_(leftside:T_ruleno + length.tokenlist:T * stateno.top.newstk)
  assert newstateno > 0 report "???"
  let newstkele = stkele(newstateno, leftside)
  step(push(newstk, newstkele), input, attrib, tokenno, place, place2, lastrule)

function recoverStep:T(stk:stack.int, tokenno:int, list:seq.word) seq.word
let actioncode = if tokenno = 0 then 0 else actiontable:T_(tokenno + length.tokenlist:T * top.stk)
if actioncode > 0 then {shift} recoverStep:T(push(stk, actioncode), 0, list)
else if actioncode < 0 then
 {reduce}
 recoverStep:T(pop(stk, rulelength:T_(-actioncode)), leftside:T_(-actioncode), list)
else
 let action2 = recovery:T_(top.stk)
 if action2 > 0 then
  {shift}
  if tokenlist:T_action2 ∈ "#" then list
  else recoverStep:T(stk, action2, list + decodetoken:T(action2))
 else if action2 = 0 then "problem $(tokenno) $(toseq.stk) $(list)"
 else {reduce} recoverStep:T(pop(stk, rulelength:T_(-action2)), leftside:T_(-action2), list)

function decodetoken:T(token:int) seq.word
let t = tokenlist:T_token
if t ∈ "E" then "@expression@"
else if t ∈ "L" then "@expression list@"
else if t ∈ "T" then "@type@"
else if t ∈ "$wordlist" then ") $(dq)" else [t]

use otherseq.int

Function sortedlextable:T seq.token.T sort.lextable:T

function lextable:T seq.token.T
{generated by genlex module in tools}
[token("#"_1, 19, attribute:T("#"))
, token("$wordlist"_1, 27, attribute:T("$wordlist"))
, token("("_1, 3, attribute:T("("))
, token(")"_1, 4, attribute:T(")"))
, token("*"_1, 10, attribute:T("*"))
, token("+"_1, 8, attribute:T("+"))
, token(","_1, 12, attribute:T(","))
, token("-"_1, 8, attribute:T("-"))
, token("."_1, 1, attribute:T("."))
, token("/"_1, 10, attribute:T("/"))
, token("/for"_1, 29, attribute:T("/for"))
, token("/if"_1, 15, attribute:T("/if"))
, token("0"_1, 17, attribute:T("0"))
, token("2"_1, 17, attribute:T("2"))
, token(":"_1, 5, attribute:T(":"))
, token("<"_1, 6, attribute:T("<"))
, token("<<"_1, 10, attribute:T("<<"))
, token("="_1, 2, attribute:T("="))
, token(">"_1, 6, attribute:T(">"))
, token(">1"_1, 6, attribute:T(">1"))
, token(">2"_1, 6, attribute:T(">2"))
, token(">>"_1, 10, attribute:T(">>"))
, token("Function"_1, 30, attribute:T("Function"))
, token("I"_1, 17, attribute:T("I"))
, token("T"_1, 30, attribute:T("T"))
, token("W"_1, 30, attribute:T("W"))
, token("["_1, 13, attribute:T("["))
, token("\"_1, 10, attribute:T("\"))
, token("]"_1, 7, attribute:T("]"))
, token("^"_1, 14, attribute:T("^"))
, token("_"_1, 14, attribute:T("_"))
, token("a"_1, 30, attribute:T("a"))
, token("assert"_1, 23, attribute:T("assert"))
, {???? token (" comment"_1, 11, attribute:T (" comment")),}
token("do"_1, 31, attribute:T("do"))
, token("else"_1, 21, attribute:T("else"))
, token("empty"_1, 30, attribute:T("empty"))
, token("for"_1, 9, attribute:T("for"))
, token("function"_1, 30, attribute:T("function"))
, token("i"_1, 30, attribute:T("i"))
, token("if"_1, 18, attribute:T("if"))
, token("in"_1, 30, attribute:T("in"))
, token("inst"_1, 30, attribute:T("inst"))
, token("int"_1, 30, attribute:T("int"))
, token("is"_1, 16, attribute:T("is"))
, token("let"_1, 22, attribute:T("let"))
, token("mod"_1, 10, attribute:T("mod"))
, token("mytype"_1, 30, attribute:T("mytype"))
, token("report"_1, 24, attribute:T("report"))
, token("seq"_1, 30, attribute:T("seq"))
, token("then"_1, 20, attribute:T("then"))
, token("use"_1, 30, attribute:T("use"))
, token("while"_1, 28, attribute:T("while"))
, token("wl"_1, 32, attribute:T("wl"))
, token("word"_1, 30, attribute:T("word"))
, token("∈"_1, 8, attribute:T("∈"))
, token("∉"_1, 8, attribute:T("∉"))
, token("∧"_1, 25, attribute:T("∧"))
, token("∨"_1, 26, attribute:T("∨"))
, token("∩"_1, 10, attribute:T("∩"))
, token("∪"_1, 10, attribute:T("∪"))
, token("≠"_1, 6, attribute:T("≠"))
, token("≤"_1, 6, attribute:T("≤"))
, token("≥"_1, 6, attribute:T("≥"))
, token("⊻"_1, 26, attribute:T("⊻"))
, token(dq_1, 27, attribute:T(dq))
, token(merge."/ and", 25, attribute:T("∧"))
, token(merge."/ cap", 10, attribute:T("∩"))
, token(merge."/ cup", 10, attribute:T("∪"))
, token(merge."/ ge", 6, attribute:T("≥"))
, token(merge."/ in", 8, attribute:T("∈"))
, token(merge."/ le", 6, attribute:T("≤"))
, token(merge."/ ne", 6, attribute:T("≠"))
, token(merge."/ nin", 8, attribute:T("∉"))
, token(merge."/ or", 26, attribute:T("∨"))
, token(merge."/ xor", 8, attribute:T("⊻"))
]

function Wtoken:T int {generated by genlex module in tools} 30

function Itoken:T int {generated by genlex module in tools} 17

function rulelength:T seq.int
[2, 1, 2, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 1, 3, 3, 5, 4, 6, 1
, 3, 1, 3, 1, 4, 3, 6, 7, 3, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3
, 3, 3, 5, 1, 3, 1, 2, 3, 5, 5, 8, 10, 1, 2, 3, 2, 2]

function leftside:T seq.int
[41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 39, 39, 39, 39, 39, 39, 44
, 44, 33, 33, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 36
, 40, 36, 36, 36, 36, 36, 36, 42, 42, 37, 36, 36, 38, 34, 34, 36, 43]

function tokenlist:T seq.word
".= ():>]-for * comment, [_/if is I if # then else let assert report ∧ ∨ $wordlist while /for W do
 wl T X L E F2 D FP A F F1 G NM HH"

function startstate:T int 1

function finalstate:T int 14

function recovery:T seq.int
[{1}-0
, {2 NM} 44
, {3 #} 19
, {4}-2
, {5 (} 3
, {6 (} 3
, {7 (} 3
, {8}-20
, {9 (} 3
, {10 (} 3
, {11 (} 3
, {12 (} 3
, {13 T} 33
, {14}-57
, {15}-3
, {16 A} 40
, {17 F2} 37
, {18 E} 36
, {19}-46
, {20 E} 36
, {21}-20
, {22 E} 36
, {23 E} 36
, {24 E} 36
, {25}-44
, {26 L} 35
, {27 $wordlist} 27
, {28}-1
, {29}-24
, {30 FP} 39
, {31 FP} 39
, {32 FP} 39
, {33 T} 33
, {34 FP} 39
, {35 FP} 39
, {36 FP} 39
, {37 FP} 39
, {38 FP} 39
, {39}-12
, {40}-22
, {41 FP} 39
, {42 E} 36
, {43}-47
, {44 =} 2
, {45 E} 36
, {46 =} 2
, {47 do} 31
, {48,} 12
, {49}-54
, {50 report} 24
, {51 E} 36
, {52}-30
, {53 then} 20
, {54)} 4
, {55 I} 17
, {56]} 7
, {57}-38
, {58 E} 36
, {59}-56
, {60 E} 36
, {61 E} 36
, {62 E} 36
, {63 E} 36
, {64 E} 36
, {65 E} 36
, {66 E} 36
, {67 L} 35
, {68 W} 30
, {69}-14
, {70}-22
, {71)} 4
, {72)} 4
, {73)} 4
, {74}-21
, {75)} 4
, {76)} 4
, {77)} 4
, {78)} 4
, {79}-13
, {80 T} 33
, {81)} 4
, {82 E} 36
, {83}-42
, {84 E} 36
, {85 E} 36
, {86 E} 36
, {87 W} 30
, {88 D} 38
, {89}-31
, {90 E} 36
, {91}-26
, {92}-45
, {93}-40
, {94 E} 36
, {95}-55
, {96}-32
, {97}-34
, {98}-35
, {99}-33
, {100}-36
, {101}-37
, {102}-29
, {103)} 4
, {104:} 5
, {105 T} 33
, {106 T} 33
, {107 T} 33
, {108 T} 33
, {109 T} 33
, {110 T} 33
, {111 T} 33
, {112 T} 33
, {113 T} 33
, {114}-23
, {115 T} 33
, {116}-41
, {117}-48
, {118 /for} 29
, {119 do} 31
, {120-} 8
, {121}-53
, {122 E} 36
, {123 else} 21
, {124}-39
, {125}-25
, {126 T} 33
, {127}-16
, {128}-9
, {129 W} 30
, {130}-15
, {131}-22
, {132}-7
, {133}-8
, {134}-6
, {135}-10
, {136}-11
, {137}-5
, {138}-4
, {139 (} 3
, {140 E} 36
, {141 E} 36
, {142 E} 36
, {143}-43
, {144 E} 36
, {145}-18
, {146:} 5
, {147 T} 33
, {148 E} 36
, {149 /for} 29
, {150}-49
, {151}-50
, {152}-27
, {153 T} 33
, {154}-17
, {155)} 4
, {156 (} 3
, {157}-28
, {158}-19
, {159}-51
, {160 E} 36
, {161)} 4
, {162}-52
]

function actiontable:T seq.int
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4
, 0, 6, 0, 0, 0, 7, 0, 9, 0, 5, 0, 0, 0, 12, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 0, 8
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 15, 0, 26, 0, 0
, 0, 25, 23, -2, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 28, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -20, -20, -20, 33, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20
, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20
, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -3, 0, 0, 0, 0, -3, -3, 0, -3, 0, -3, 0, 0
, 0, -3, -3, -3, 0, 0, -3, -3, 0, 0, 0, -3, 0, 0, -3
, 0, -3, 0, 27, 0, 43, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46
, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 48, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 49, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, -46, -46, -46, 0, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46
, 0, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46
, -46, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 50, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 51, -20, -20, -20, 33, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20
, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20
, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 52, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 53, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 54, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 55, -44, -44, -44, 0, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44
, 0, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44
, -44, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 56, 57, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0
, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, -1, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -24, 67, -24, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24
, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24
, -24, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0
, 0, 0, -12, 0, 0, 0, 0, -12, -12, 0, -12, 0, -12, 0, 0
, 0, -12, -12, -12, 0, 0, -12, -12, 0, 0, 0, -12, 0, 0, -12
, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 80, -22, -22, -22, 0, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70
, 0, 0, 69, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 43, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, -47, -47, -47, 0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47
, 0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47
, -47, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 83, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0
, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, -54, 0, 0, 0
, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 88, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 89, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, -30, -30, -30, 0, -30, -30, -30, -30, -30, -30, -30, -30, 66, -30
, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30
, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 90, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 91, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 94, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, -38, 0, 62, -38, 63, 0, 60, 0, -38, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 95, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, -56, -56, -56, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56
, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56
, -56, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 96, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 97, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 98, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 99, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 100, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 101, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 102, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 103, 57, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -14, -14, 0, 0, 0, -14, -14, 0, -14, -14, -14, 0, 0
, 0, -14, -14, -14, 0, 0, -14, -14, 0, 0, 0, -14, 0, 0, -14
, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 80, -22, -22, -22, 105, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -21, -21, -21, 0, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21
, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21
, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -13, 0, 0, 0, 0, -13, -13, 0, -13, 107, -13, 0, 0
, 0, -13, -13, -13, 0, 0, -13, -13, 0, 0, 0, -13, 0, 0, -13
, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 116, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 61, -42, -42, 0, 62, -42, 63, -42, 60, -42, -42, -42, 66, -42
, 0, -42, -42, -42, -42, -42, -42, -42, -42, 64, 65, -42, -42, -42, -42
, -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 117, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 118, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 119, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 121, 0, 122, 0, 0, 0, 0, 0, 29, 0
, 0, -31, -31, -31, 0, -31, -31, -31, -31, -31, -31, -31, -31, 66, -31
, 0, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31
, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 123, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, -26, -26, -26, 0, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26
, 0, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26
, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -45, -45, -45, 0, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45
, 0, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45
, -45, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -40, -40, -40, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40
, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40
, -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 124, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, -55, 0, 0, 0
, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -32, -32, -32, 0, -32, -32, -32, -32, -32, -32, -32, -32, 66, -32
, 0, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32
, -32, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -34, -34, -34, 0, -34, -34, 63, -34, 60, -34, -34, -34, 66, -34
, 0, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34
, -34, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -35, -35, -35, 0, -35, -35, 63, -35, 60, -35, -35, -35, 66, -35
, 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35
, -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -33, -33, -33, 0, -33, -33, -33, -33, 60, -33, -33, -33, 66, -33
, 0, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33
, -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, -36, -36, 0, 62, -36, 63, -36, 60, -36, -36, -36, 66, -36
, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36
, -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, -37, -37, 0, 62, -37, 63, -37, 60, -37, -37, -37, 66, -37
, 0, -37, -37, -37, -37, -37, -37, -37, -37, 64, -37, -37, -37, -37, -37
, -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -29, -29, -29, 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29
, 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29
, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131
, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -23, -23, -23, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23
, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23
, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, -41, 0, 0, 62, 0, 63, -41, 60, -41, 0, -41, 66, 0
, 0, -41, -41, 0, 0, 0, -41, -41, 0, 64, 65, -41, 0, 0, -41
, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, -48, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 139, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 141, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, -53, 0, 0, 62, 0, 63, -53, 60, -53, 0, -53, 66, 0
, 0, -53, -53, 0, 0, 0, -53, -53, 0, 64, 65, -53, 0, 0, -53
, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 143, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 144, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, -39, 0, 62, -39, 63, 0, 60, 0, -39, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -25, -25, -25, 0, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25
, 0, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25
, -25, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -16, -16, 0, 0, 0, -16, -16, 0, -16, -16, -16, 0, 0
, 0, -16, -16, -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, -16
, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -9, 0, 0, 0, 0, -9, -9, 0, -9, 0, -9, 0, 0
, 0, -9, -9, -9, 0, 0, -9, -9, 0, 0, 0, -9, 0, 0, -9
, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -15, -15, 0, 0, 0, -15, -15, 0, -15, -15, -15, 0, 0
, 0, -15, -15, -15, 0, 0, -15, -15, 0, 0, 0, -15, 0, 0, -15
, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 80, -22, -22, -22, 147, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -7, 0, 0, 0, 0, -7, -7, 0, -7, 0, -7, 0, 0
, 0, -7, -7, -7, 0, 0, -7, -7, 0, 0, 0, -7, 0, 0, -7
, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -8, 0, 0, 0, 0, -8, -8, 0, -8, 0, -8, 0, 0
, 0, -8, -8, -8, 0, 0, -8, -8, 0, 0, 0, -8, 0, 0, -8
, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -6, 0, 0, 0, 0, -6, -6, 0, -6, 0, -6, 0, 0
, 0, -6, -6, -6, 0, 0, -6, -6, 0, 0, 0, -6, 0, 0, -6
, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -10, 0, 0, 0, 0, -10, -10, 0, -10, 0, -10, 0, 0
, 0, -10, -10, -10, 0, 0, -10, -10, 0, 0, 0, -10, 0, 0, -10
, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -11, 0, 0, 0, 0, -11, -11, 0, -11, 0, -11, 0, 0
, 0, -11, -11, -11, 0, 0, -11, -11, 0, 0, 0, -11, 0, 0, -11
, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -5, 0, 0, 0, 0, -5, -5, 0, -5, 0, -5, 0, 0
, 0, -5, -5, -5, 0, 0, -5, -5, 0, 0, 0, -5, 0, 0, -5
, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -4, 0, 0, 0, 0, -4, -4, 0, -4, 0, -4, 0, 0
, 0, -4, -4, -4, 0, 0, -4, -4, 0, 0, 0, -4, 0, 0, -4
, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 149, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 150, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 151, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 61, -43, -43, 0, 62, -43, 63, -43, 60, -43, -43, -43, 66, -43
, 0, -43, -43, -43, -43, -43, -43, -43, -43, 64, 65, -43, -43, -43, -43
, -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 152, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 0, -18, -18, 0, 0, 0, -18, -18, 0, -18, -18, -18, 0, 0
, 0, -18, -18, -18, 0, 0, -18, -18, 0, 0, 0, -18, 0, 0, -18
, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 155, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 156, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, -49, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 0, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, -50, 0, 0
, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, -27, -27, 0, 62, -27, 63, -27, 60, -27, -27, -27, 66, 157
, 0, -27, -27, -27, -27, -27, -27, -27, -27, 64, 65, -27, -27, -27, -27
, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40
, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -17, -17, 0, 0, 0, -17, -17, 0, -17, -17, -17, 0, 0
, 0, -17, -17, -17, 0, 0, -17, -17, 0, 0, 0, -17, 0, 0, -17
, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 61, 0, 159, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -28, -28, -28, 0, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28
, 0, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28
, -28, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, -19, -19, 0, 0, 0, -19, -19, 0, -19, -19, -19, 0, 0
, 0, -19, -19, -19, 0, 0, -19, -19, 0, 0, 0, -19, 0, 0, -19
, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -51, -51, -51, 0, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51
, 0, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51
, -51, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 24, 0, 0, 0, 0, 22, 17, 0, 42, 0, 26, 0, 0
, 0, 25, 23, 0, 0, 0, 16, 20, 0, 0, 0, 19, 0, 0, 21
, 0, 18, 0, 27, 0, 161, 0, 0, 0, 0, 0, 0, 0, 29, 0
, 0, 61, 0, 162, 0, 62, 0, 63, 0, 60, 0, 0, 0, 66, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 65, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, -52, -52, -52, 0, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52
, 0, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52
, -52, -52] 