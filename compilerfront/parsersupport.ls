Module parsersupport.T

use seq.stkele.T

use stack.stkele.T

use otherseq.token.T

use otherseq.int

use stack.int

use pretty

use standard

use process.seq.word

Export type:stkele.T

Export type:reduction.T

Export type:token.T

type token is w:word, tokenno:int, attribute:T

type stkele is stateno:int, attribute:T

type reduction is toseq:seq.stkele.T

unbound attribute:T(seq.word) T

unbound action(int, seq.word, int, reduction.T, stack.stkele.T) T

unbound text(T) seq.word

unbound forward(stk:T, T) T

unbound errormessage(message:seq.word, input:seq.word, place:int, parsestk:stack.stkele.T) seq.word

Function >1(a:token.T, b:token.T) ordering w.a >1 w.b

Function =(a:token.T, b:token.T) boolean w.a = w.b

Function _(r:reduction.T, n:int) T attribute.(toseq.r)_n

Function last(r:reduction.T) T attribute.(toseq.r)_(length.toseq.r)

Function %(s:stkele.T) seq.word %.stateno.s

%.stateno.top.parsestk

use otherseq.stkele.T

Function errormessage:T(message:seq.word, input:seq.word, place:int, parsestk:stack.stkele.T) seq.word
let m = "<* literal $(message) *>",
if subseq(message, 1, 3) = "missing string terminator" then
 m + "/br" + input
else
 {m+"
  /br"+subseq (input, 1, place)}
 m
 + "/br"
 + for acc = empty:stack.int, x ∈ toseq.parsestk do
  push(acc, stateno.x)
 /do
  let action = recovery:T_(top.acc)
  assert true report %.toseq.parsestk + "action:$(decodetoken:T(action))"
  let tail = 
   if action > 0 then
    recoverStep:T(acc, action, decodetoken:T(action))
   else
    recoverStep:T(acc, 0, "")
  let m2 = 
   if place > length.input then
    "/br At end of paragraph /br $(m)"
   else
    "/br $(m) /br part of unprocessed input: $(subseq(input, place + 1, place + 10))"
  {+%.toseq.parsestk},
  if subseq(tail, 1, 1) = "problem" then
   tail + "/br failed problem" + %.toseq.acc + m2 + "/br" + input
  else
   let marker = if subseq(tail, 1, 1) = "I" then "99599"_1 else merge."! !"
   let tail2 = 
    if isempty.tail then
     tail
    else if first.tail ∈ ("T E FP NM L D3 E2 W I" + marker) then
     [marker] + tail << 1
    else
     let first2 = subseq(tail, 1, 2),
     if first2 ∈ ["/do E2", "do E2", "else E2", "then E2", "report E2", ") $(dq)"] then
      "-$(marker) $(tail)"
     else if first2 = "F3 /do" then
      "$(marker) = 1, a ∈ 1 do 1 $(tail << 1)"
     else if first2 ∈ ["= E", ":T", ", E", ", W", ") T", "(FP"] then
      "$(first.tail) $(marker) $(tail << 2)"
     else if first2 ∈ ["-E"] then
      "∈ $(marker) $(tail << 2)"
     else if first.tail ∈ ")]" then "-$(marker) $(tail)" else tail
   ,
   if not.isempty.tail ∧ tail2 = tail then
    "failed unexpected first of tail $(tail)::: $(first.tail)"
   else
    let p = process.pretty(subseq(input, 1, place) + tail2),
    if aborted.p then
     "failed recovery
      /br $(subseq(input, 1, place))
      /br tail2: $(tail2) tail:$(tail)
      /br $(input) mess $(message.p) $(toseq.acc)
      /p"
    else
     {find location of maker in prettied input and remove input after marker and possibly some before}
     if isempty.tail2 then
      result.p + m2
     else
      for acc3 = "", skip = false, w ∈ result.p do
       if w = marker then
        if marker = first.tail2 then next(acc3, true) else next(removemore:T(tail2, acc3), true)
       else if skip ∧ w ∉ "*>" then next(acc3, skip) else next(acc3 + w, skip)
      /do acc3 + m2

Function removemore:T(tail2:seq.word, acc3:seq.word) seq.word
let hasblock = if subseq(acc3, length.acc3 - 1, length.acc3) = "<* block" then 2 else 0
let haswhite = 
 if acc3_(length.acc3 - hasblock) ∈ ("/br" + space) then hasblock + 1 else hasblock
let a = acc3 >> haswhite
let len = length.a,
if first.tail2 ∈ "/for" ∧ subseq(a, len - 1, len) = "/for (" then
 a << 2
else if first.tail2 ∈ "-" ∧ last.a ∈ "∈" then
 a << 1
else
 {if first.tail2 /in". ." /and last.a /in". ." then a << 1 else}
 if last.a = first.tail2 then
  a << 1
 else if subseq(tail2, 1, 2) = ") !!" then
  {ignore close para} a
 else
  a + "failed $(haswhite)"
  + for acc = "", x ∈ tail2 + "??" + subseq(a, len - 4, len) do
   acc + encodeword([char.0] + decodeword.x)
  /do acc /for
 /if
 + if hasblock = 1 then "<* block" else ""

Function parse:T(initial:T, lextable:seq.token.T, input:seq.word, headeronly:boolean) T
let stringtoken = findindex(tokenlist:T, "$wordlist"_1)
let wlendtoken = findindex(tokenlist:T, "wlend"_1)
let commenttoken = findindex(tokenlist:T, "comment"_1)
let codeinstringtoken = findindex(tokenlist:T, "wl"_1)
let wlstarttoken = findindex(tokenlist:T, "wlstart"_1)
let lastrule = if headeronly then 25 else length.rulelength:T + 1,
for state = ""
 , lrpart = push(empty:stack.stkele.T, stkele(startstate:T, initial))
 , last = 0
 , idx = 1
 , this ∈ input + "#"
while stateno.top.lrpart ≠ -1
do
 if {in code} isempty.state ∨ first.state ∈ ")" ∧ not(this ∈ ")" ∧ state_2 ∈ dq) then
  if this ∈ "{" then
   next("} $(state)", lrpart, idx, idx + 1)
  else if this ∈ dq then
   next(dq + state, lrpart, idx, idx + 1)
  else
   let lexindex = binarysearch(lextable, token(this, 0, attribute:T("")))
   let tokenno = 
    if lexindex < 0 then
     {this is not in lex table}
     let kind = checkinteger.this,
     if kind = "WORD"_1 then
      Wtoken:T
     else
      assert kind ≠ "ILLEGAL"_1 report "Illegal character in Integer" + this,
      Itoken:T
    else
     tokenno.lextable_lexindex
   let att = if lexindex < 0 then attribute:T([this]) else attribute.lextable_lexindex
   let newlrpart = step(lrpart, input, att, tokenno, idx - 1, lastrule)
   let newstate = 
    if isempty.state then
     state
    else if this ∈ "(" then ") $(state)" else if this ∈ ")" then state << 1 else state
   ,
   next(newstate, newlrpart, idx, idx + 1)
 else
  let kind = 
   if first.state ∈ dq ∧ this ∈ "(" ∧ input_(idx - 1) = "$"_1 then
    codeinstringtoken
   else if first.state ∈ dq ∧ this ∈ dq then
    if subseq(input, last, last) = dq then stringtoken else wlendtoken
   else if first.state ∈ "}" ∧ this ∈ "}" ∧ subseq(state, 2, 2) ≠ "}" then
    commenttoken
   else
    0
  let newlrpart = 
   if kind = 0 then
    lrpart
   else
    step(lrpart
     , input
     , attribute:T(subseq(input, last, if kind = codeinstringtoken then idx - 1 else idx))
     , {tokenno}
     if input_last ∈ dq ∧ kind = codeinstringtoken then wlstarttoken else kind
     , last - 1
     , lastrule)
  ,
  if kind ∈ [commenttoken, stringtoken, wlendtoken]
  ∨ this ∈ ")" ∧ subseq(state, 1, 2) = ") $(dq)" then
   next(state << 1, newlrpart, idx, idx + 1)
  else if kind = codeinstringtoken then
   next(") $(state)", newlrpart, idx, idx + 1)
  else
   {in string or comment.}
   let newstate = 
    if first.state ∈ dq then
     state
    else if this ∈ "{" then "} $(state)" else if this ∈ "}" then state << 1 else state
   ,
   next(newstate, lrpart, last, idx + 1)
/do
 let r = toseq.lrpart
 assert isempty.state ∨ headeronly ∧ last.state ∈ dq
 report errormessage("missing string terminator $(state)", input, idx, lrpart),
 attribute.r_min(length.r, 2)

function step(stk:stack.stkele.T
 , input:seq.word
 , attrib:T
 , tokenno:int
 , place:int
 , lastrule:int) stack.stkele.T
let stateno = stateno.top.stk
let actioncode = actiontable:T_(tokenno + length.tokenlist:T * stateno),
if actioncode > 0 then
 push(stk, stkele(actioncode, forward(attribute.top.stk, attrib)))
else
 assert actioncode < 0 report errormessage("syntax error", input, place, stk)
 let ruleno = -actioncode
 let rulelen = rulelength:T_ruleno
 let leftside = action(ruleno, input, place, reduction.top(stk, rulelen), stk)
 let newstk = pop(stk, rulelen),
 if ruleno ≥ lastrule then
  push(newstk, stkele(-1, leftside))
 else
  let newstateno = actiontable:T_(leftside:T_ruleno + length.tokenlist:T * stateno.top.newstk)
  assert newstateno > 0 report "???"
  let newstkele = stkele(newstateno, leftside),
  step(push(newstk, newstkele), input, attrib, tokenno, place, lastrule)

function recoverStep:T(stk:stack.int, tokenno:int, list:seq.word) seq.word
let actioncode = 
 if tokenno = 0 then 0 else actiontable:T_(tokenno + length.tokenlist:T * top.stk)
,
if actioncode > 0 then
 {shift} recoverStep:T(push(stk, actioncode), 0, list)
else if actioncode < 0 then
 {reduce}
 recoverStep:T(pop(stk, rulelength:T_(-actioncode)), leftside:T_(-actioncode), list)
else
 let action2 = recovery:T_(top.stk),
 if action2 > 0 then
  {shift}
  if tokenlist:T_action2 ∈ "#" then
   list
  else
   recoverStep:T(stk, action2, list + decodetoken:T(action2))
 else if action2 = 0 then
  "problem $(tokenno) $(toseq.stk) $(list)"
 else
  let leftside = leftside:T_(-action2),
  {reduce} recoverStep:T(pop(stk, rulelength:T_(-action2)), leftside, list)

function decodetoken:T(token:int) seq.word
let t = tokenlist:T_token,
if t ∈ "F0" then "W = W, W ∈ W" else if t ∈ "wlend" then ") $(dq)" else [t]

Function sortedlextable:T seq.token.T sort.lextable:T

function lextable:T seq.token.T
{generated by genlex module in tools}
[token("#"_1, 19, attribute:T("#"))
 , token("("_1, 3, attribute:T("("))
 , token(")"_1, 4, attribute:T(")"))
 , token("*"_1, 10, attribute:T("*"))
 , token("+"_1, 8, attribute:T("+"))
 , token(","_1, 12, attribute:T(","))
 , token("-"_1, 8, attribute:T("-"))
 , token("."_1, 1, attribute:T("."))
 , token(". "_1, 1, attribute:T("."))
 , token("/"_1, 10, attribute:T("/"))
 , token("/for"_1, 29, attribute:T("/for"))
 , token("/if"_1, 15, attribute:T("/if"))
 , token("0"_1, 17, attribute:T("0"))
 , token("2"_1, 17, attribute:T("2"))
 , token(":"_1, 5, attribute:T(":"))
 , token(": "_1, 5, attribute:T(":"))
 , token("<"_1, 6, attribute:T("<"))
 , token("<<"_1, 10, attribute:T("<<"))
 , token("="_1, 2, attribute:T("="))
 , token(">"_1, 6, attribute:T(">"))
 , token(">1"_1, 6, attribute:T(">1"))
 , token(">2"_1, 6, attribute:T(">2"))
 , token(">>"_1, 10, attribute:T(">>"))
 , token("Function"_1, 30, attribute:T("Function"))
 , token("I"_1, 17, attribute:T("I"))
 , token("T"_1, 30, attribute:T("T"))
 , token("W"_1, 30, attribute:T("W"))
 , token("["_1, 13, attribute:T("["))
 , token("\"_1, 10, attribute:T("\"))
 , token("]"_1, 7, attribute:T("]"))
 , token("^"_1, 14, attribute:T("^"))
 , token("_"_1, 14, attribute:T("_"))
 , token("a"_1, 30, attribute:T("a"))
 , token("assert"_1, 23, attribute:T("assert"))
 , token("do"_1, 31, attribute:T("do"))
 , token("else"_1, 21, attribute:T("else"))
 , token("empty"_1, 30, attribute:T("empty"))
 , token("for"_1, 9, attribute:T("for"))
 , token("function"_1, 30, attribute:T("function"))
 , token("i"_1, 30, attribute:T("i"))
 , token("if"_1, 18, attribute:T("if"))
 , token("in"_1, 30, attribute:T("in"))
 , token("inst"_1, 30, attribute:T("inst"))
 , token("int"_1, 30, attribute:T("int"))
 , token("is"_1, 16, attribute:T("is"))
 , token("let"_1, 22, attribute:T("let"))
 , token("mod"_1, 10, attribute:T("mod"))
 , token("mytype"_1, 30, attribute:T("mytype"))
 , token("report"_1, 24, attribute:T("report"))
 , token("seq"_1, 30, attribute:T("seq"))
 , token("then"_1, 20, attribute:T("then"))
 , token("use"_1, 30, attribute:T("use"))
 , token("while"_1, 28, attribute:T("while"))
 , token("wlend"_1, 34, attribute:T("wlend"))
 , token("wlstart"_1, 32, attribute:T("wlstart"))
 , token("word"_1, 30, attribute:T("word"))
 , token("∈"_1, 8, attribute:T("∈"))
 , token("∉"_1, 8, attribute:T("∉"))
 , token("∧"_1, 25, attribute:T("∧"))
 , token("∨"_1, 26, attribute:T("∨"))
 , token("∩"_1, 10, attribute:T("∩"))
 , token("∪"_1, 10, attribute:T("∪"))
 , token("≠"_1, 6, attribute:T("≠"))
 , token("≤"_1, 6, attribute:T("≤"))
 , token("≥"_1, 6, attribute:T("≥"))
 , token("⊻"_1, 26, attribute:T("⊻"))
 , token(dq_1, 27, attribute:T(dq))
 , token(merge."/ and", 25, attribute:T("∧"))
 , token(merge."/ cap", 10, attribute:T("∩"))
 , token(merge."/ cup", 10, attribute:T("∪"))
 , token(merge."/ do", 35, attribute:T("/do"))
 , token(merge."/ ge", 6, attribute:T("≥"))
 , token(merge."/ in", 8, attribute:T("∈"))
 , token(merge."/ le", 6, attribute:T("≤"))
 , token(merge."/ ne", 6, attribute:T("≠"))
 , token(merge."/ nin", 8, attribute:T("∉"))
 , token(merge."/ or", 26, attribute:T("∨"))
 , token(merge."/ xor", 8, attribute:T("⊻"))]

function Wtoken:T int
{generated by genlex module in tools}
30

function Itoken:T int
{generated by genlex module in tools}
17

function rulelength:T seq.int
[2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 1, 2, 1, 3, 3, 5, 4, 6, 1, 3, 1, 3, 1
 , 4, 3, 3, 4, 3, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 4, 1, 4, 1, 3, 1, 2, 3, 5
 , 5, 3, 5, 5, 4, 2, 2, 2, 3, 1, 2, 3, 4, 2, 3]

function leftside:T seq.int
[42, 42, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 41, 41, 41, 41, 41, 41
 , 44, 44, 36, 36, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 45, 45
 , 40, 49, 49, 49, 40, 40, 40, 40, 46, 46, 38, 43, 43, 40, 40, 40, 47, 39, 39, 39
 , 49, 49, 48, 37, 37]

function tokenlist:T seq.word
".= ():>]-for * comment, [_/if is I if # then else let assert report ∧ ∨ $wordlist while /for W do
 wlstart wl wlend /do T X F0 E2 E FP F F3 NM L F1 G EI E3 D0 D1"

function startstate:T int 1

function finalstate:T int 15

function recovery:T seq.int
[{1}-0, {2 NM} 44, {3 #} 19, {4}-13, {5}-2
 , {6 (} 3, {7 (} 3, {8 (} 3, {9}-21, {10 (} 3
 , {11 (} 3, {12 (} 3, {13 (} 3, {14 T} 36, {15}-57
 , {16}-14, {17}-43, {18 W} 30, {19 F3} 43, {20}-47
 , {21 E} 40, {22}-21, {23 E} 40, {24 E} 40, {25 E} 40
 , {26}-45, {27 L} 45, {28 wlend} 34, {29 E} 40, {30}-1
 , {31}-60, {32}-25, {33 else} 21, {34 E} 40, {35 FP} 41
 , {36 FP} 41, {37 FP} 41, {38 T} 36, {39 FP} 41, {40 FP} 41
 , {41 FP} 41, {42 FP} 41, {43 FP} 41, {44}-11, {45}-23
 , {46 FP} 41, {47 E} 40, {48}-48, {49 =} 2, {50 =} 2
 , {51 do} 31, {52 /do} 35, {53,} 12, {54 report} 24, {55 E} 40
 , {56}-31, {57 then} 20, {58)} 4, {59 I} 17, {60}-39
 , {61]} 7, {62 E} 40, {63}-56, {64}-64, {65 E} 40
 , {66 E} 40, {67 E} 40, {68 E} 40, {69 E} 40, {70 E} 40
 , {71 E} 40, {72 L} 45, {73 E2} 39, {74 E} 40, {75}-58
 , {76}-61, {77 W} 30, {78}-15, {79}-23, {80)} 4
 , {81)} 4, {82)} 4, {83}-22, {84)} 4, {85)} 4
 , {86)} 4, {87)} 4, {88}-12, {89 T} 36, {90)} 4
 , {91 E} 40, {92 E} 40, {93 E2} 39, {94 E} 40, {95 E2} 39
 , {96 W} 30, {97 E2} 39, {98}-32, {99 E2} 39, {100}-27
 , {101}-46, {102}-41, {103 E} 40, {104}-65, {105}-33
 , {106}-35, {107}-36, {108}-34, {109}-37, {110}-38
 , {111}-30, {112)} 4, {113}-28, {114}-59, {115}-62
 , {116}-43, {117 E3} 49, {118:} 5, {119 T} 36, {120 T} 36
 , {121 T} 36, {122 T} 36, {123 T} 36, {124 T} 36, {125 T} 36
 , {126 T} 36, {127 T} 36, {128}-24, {129 T} 36, {130}-42
 , {131}-49, {132}-52, {133 do} 31, {134}-55, {135-} 8
 , {136}-44, {137}-63, {138}-40, {139}-26, {140}-29
 , {141 T} 36, {142}-17, {143}-8, {144 W} 30, {145}-16
 , {146}-23, {147}-6, {148}-7, {149}-5, {150}-9
 , {151}-10, {152}-4, {153}-3, {154 E2} 39, {155}-54
 , {156 E} 40, {157 E} 40, {158}-19, {159:} 5, {160 T} 36
 , {161}-53, {162}-50, {163}-51, {164 T} 36, {165}-18
 , {166}-20]

function actiontable:T seq.int
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 7, 0
 , 0, 0, 8, 0, 10, 0, 6, 0, 0, 0, 13, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 11, 12, 0, 0, 0, 9, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0
 , 0, -13, -13, 0, 16, 0, -13, 0, 0, 0, -13, -13, -13, 0, 0
 , -13, -13, 0, 0, 0, -13, 0, 0, -13, 0, -13, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 17, 0, 27, 0, 0
 , 0, 26, 24, -2, 0, 0, 18, 21, 0, 0, 0, 20, 0, 0, 22
 , 0, 29, 0, 0, 0, 0, 28, 0, 30, 31, 0, 0, 0, 32, 0
 , 0, 0, 33, 34, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21, -21, 38, -21
 , -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21
 , -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 44
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, -14, -14
 , 0, -14, 0, -14, 0, 0, 0, -14, -14, -14, 0, 0, -14, -14, 0
 , 0, 0, -14, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, -43, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, -43, -43, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 33
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0
 , 0, 51, 0, 0, 0, 0, 52, 0, 0, 53, 0, 0, 0, 0, 0
 , 0, -47, -47, -47, 0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47
 , 0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47
 , -47, -47, -47, -47, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19
 , 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0
 , 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0
 , 54, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 55, -21, -21
 , -21, 38, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21
 , -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21
 , -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0
 , 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20
 , 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0, 56, 0, 0
 , 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 0, 57, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0
 , 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0
 , 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22
 , 0, 29, 0, 0, 0, 0, 28, 0, 0, 58, 0, 0, 0, 32, 0
 , 0, 0, 33, 0, 0, 0, 59, -45, -45, -45, 0, -45, -45, -45, -45
 , -45, -45, -45, -45, -45, -45, 0, -45, -45, -45, -45, -45, -45, -45, -45
 , -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 60, 0, 0, 0, 32, 61, 0, 0, 33
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 62, 63, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 66, -60, -60, 0, 67, -60, 68, -60
 , 65, -60, -60, -60, 71, -60, 0, -60, -60, -60, -60, -60, -60, -60, -60
 , 69, 70, -60, -60, -60, -60, -60, -60, -60, -60, -60, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 72
 , -25, 0, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, 0, -25, -25
 , -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25
 , -25, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 17, 74, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 18, 21, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 0, 75, 0, 0, 0, 32, 0, 0, 0, 33, 76, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79
 , 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 80, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 78, 0, 0, 0
 , 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0
 , 0, 0, 78, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 45, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 78
 , 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79
 , 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 85, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 78, 0, 0, 0
 , 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0
 , 0, 0, 78, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 79, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 88, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0
 , 0, -11, -11, 0, -11, 0, -11, 0, 0, 0, -11, -11, -11, 0, 0
 , -11, -11, 0, 0, 0, -11, 0, 0, -11, 0, -11, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 89, -23, -23, -23, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23
 , -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23
 , -23, -23, -23, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 78, 0, 0, 0
 , 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 33
 , 0, 0, 0, 0, -48, -48, -48, 0, -48, -48, -48, -48, -48, -48, -48
 , -48, -48, -48, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48
 , -48, -48, -48, -48, -48, -48, -48, -48, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 94, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 67
 , 0, 68, 0, 65, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 97, 69, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0
 , 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22
 , 0, 29, 0, 0, 0, 0, 28, 0, 0, 98, 0, 0, 0, 32, 0
 , 0, 0, 33, 0, 0, 0, 0, -31, -31, -31, 0, -31, -31, -31, -31
 , -31, -31, -31, -31, 71, -31, 0, -31, -31, -31, -31, -31, -31, -31, -31
 , -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0
 , 0, 0, 67, 0, 68, 0, 65, 0, 0, 0, 71, 0, 0, 0, 0
 , 0, 99, 0, 0, 0, 0, 69, 70, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 66, 0, 100, 0, 67, 0, 68, 0, 65, 0, 0
 , 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 66, 0, -39, 0, 67, -39, 68, 0, 65, 0, -39, 0, 71, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0
 , 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 104, 0, 0, 0, 32, 0, 0, 0, 33
 , 0, 0, 0, 0, -56, -56, -56, 0, -56, -56, -56, -56, -56, -56, -56
 , -56, -56, -56, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56
 , -56, -56, -56, -56, -56, -56, -56, -56, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 67
 , 0, 68, 0, 65, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 69, 70, 0, 0, 0, 0, 0, 0, -64, -64, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0
 , 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22
 , 0, 29, 0, 0, 0, 0, 28, 0, 0, 105, 0, 0, 0, 32, 0
 , 0, 0, 33, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19
 , 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0
 , 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0
 , 106, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 107, 0, 0, 0, 32, 0, 0, 0, 33
 , 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0
 , 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20
 , 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0, 108, 0, 0
 , 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 0, 109, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0
 , 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0
 , 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22
 , 0, 29, 0, 0, 0, 0, 28, 0, 0, 110, 0, 0, 0, 32, 0
 , 0, 0, 33, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19
 , 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0
 , 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0
 , 111, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 60, 0, 0, 0, 32, 112, 0, 0, 33
 , 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 17, 0
 , 27, 0, 0, 0, 26, 24, 0, 0, 0, 18, 21, 0, 0, 0, 20
 , 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 113, 31, 0, 0
 , 0, 32, 0, 0, 0, 33, 34, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 17, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 18, 21, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 0, 114, 0, 0, 0, 32, 0, 0, 0, 33, 115, 0, 0
 , 0, 66, -58, -58, 0, 67, -58, 68, -58, 65, -58, -58, -58, 71, -58
 , 0, -58, -58, -58, -58, -58, -58, -58, -58, 69, 70, -58, -58, -58, -58
 , -58, -58, -58, -58, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, -61, -61
 , 0, 116, -61, -61, 0, 0, 0, -61, -61, 0, 0, 0, -61, -61, 0
 , 0, 0, -61, 0, 0, -61, 0, -61, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, -15, -15, 0, 0, 0, -15, -15, 0, -15, -15
 , -15, 0, 0, 0, -15, -15, -15, 0, 0, -15, -15, 0, 0, 0, -15
 , 0, 0, -15, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, -23, -23, -23, 119, -23
 , -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23
 , -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0
 , 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 123, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, -22, -22, -22, 0, -22, -22, -22, -22, -22, -22, -22
 , -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22
 , -22, -22, -22, -22, -22, -22, -22, -22, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0
 , 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0
 , 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 127, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, -12, -12, 0, -12, 121
 , -12, 0, 0, 0, -12, -12, -12, 0, 0, -12, -12, 0, 0, 0, -12
 , 0, 0, -12, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 128
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19
 , 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0
 , 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0
 , 130, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 131, 0, 0, 0, 32, 0, 0, 0, 33
 , 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 17, 0
 , 27, 0, 0, 0, 26, 24, 0, 0, 0, 18, 21, 0, 0, 0, 20
 , 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 132, 31, 0, 0
 , 0, 32, 0, 0, 0, 33, 34, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 0, 133, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0
 , 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 17, 0, 27, 0, 0
 , 0, 26, 24, 0, 0, 0, 18, 21, 0, 0, 0, 20, 0, 0, 22
 , 0, 29, 0, 0, 0, 0, 28, 0, 134, 31, 0, 0, 0, 32, 0
 , 0, 0, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 17, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 18, 21, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 136, 31, 0, 0, 0, 32, 0, 0, 0, 33
 , 34, 0, 0, 0, -32, -32, -32, 0, -32, -32, -32, -32, -32, -32, -32
 , -32, 71, -32, 0, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32
 , -32, -32, -32, -32, -32, -32, -32, -32, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 17, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 18, 21, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 137, 31, 0, 0, 0, 32, 0, 0, 0, 33, 34, 0, 0
 , 0, -27, -27, -27, 0, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27
 , 0, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27
 , -27, -27, -27, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, -46, -46, -46, 0, -46, -46, -46, -46
 , -46, -46, -46, -46, -46, -46, 0, -46, -46, -46, -46, -46, -46, -46, -46
 , -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41
 , -41, 0, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, 0, -41, -41
 , -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41
 , -41, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19, 0, 47, 0
 , 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 20
 , 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0, 138, 0, 0
 , 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 66, 0, 0, 0, 67
 , 0, 68, 0, 65, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 69, 70, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, -33, -33, -33, 0, -33, -33, -33, -33, -33, -33, -33, -33, 71, -33
 , 0, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33
 , -33, -33, -33, -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 0, -35, -35, 68, -35
 , 65, -35, -35, -35, 71, -35, 0, -35, -35, -35, -35, -35, -35, -35, -35
 , -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36
 , -36, 0, -36, -36, 68, -36, 65, -36, -36, -36, 71, -36, 0, -36, -36
 , -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36
 , -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, -34, -34, -34, 0, -34, -34, -34, -34, 65, -34, -34
 , -34, 71, -34, 0, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34
 , -34, -34, -34, -34, -34, -34, -34, -34, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, -37, -37, 0, 67
 , -37, 68, -37, 65, -37, -37, -37, 71, -37, 0, -37, -37, -37, -37, -37
 , -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 66, -38, -38, 0, 67, -38, 68, -38, 65, -38, -38, -38, 71, -38
 , 0, -38, -38, -38, -38, -38, -38, -38, -38, 69, -38, -38, -38, -38, -38
 , -38, -38, -38, -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, -30, -30, -30, 0, -30, -30, -30, -30
 , -30, -30, -30, -30, -30, -30, 0, -30, -30, -30, -30, -30, -30, -30, -30
 , -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 139, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, -28, -28, -28, 0, -28, -28, -28, -28, -28, -28, -28
 , -28, -28, 140, 0, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28
 , -28, -28, -28, -28, -28, -28, -28, -28, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, -59, -59, 0, 67
 , -59, 68, -59, 65, -59, -59, -59, 71, -59, 0, -59, -59, -59, -59, -59
 , -59, -59, -59, 69, 70, -59, -59, -59, -59, -59, -59, -59, -59, -59, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, -62, 0, 0, 0, 0, -62, -62, 0, 116, -62, -62, 0, 0
 , 0, -62, -62, 0, 0, 0, -62, -62, 0, 0, 0, -62, 0, 0, -62
 , 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 76, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, -43
 , 0, -43, -43, -43, 0, 0, 0, -43, -43, 0, 0, 0, -43, -43, 0
 , 0, 0, -43, 0, 0, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 18, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 115, 0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 142
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45
 , 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 145, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0
 , 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 45, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 149
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45
 , 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 151, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0
 , 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, -24, -24, -24, 0, -24, -24, -24, -24, -24, -24, -24
 , -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24
 , -24, -24, -24, -24, -24, -24, -24, -24, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 153
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 66, -42, 0, 0, 67, 0, 68, -42, 65, -42, -42, -42, 71, 0
 , 0, -42, -42, 0, 0, 0, -42, -42, 0, 69, 70, -42, 0, 0, -42
 , 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 67, 0, 68, 0
 , 65, 0, -49, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 69, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 66, 0, 0, 0, 67, 0, 68, 0, 65, 0, 0
 , 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0
 , 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, -55, -55, 0, -55
 , -55, -55, -55, -55, -55, -55, -55, -55, -55, 0, -55, -55, -55, -55, -55
 , -55, -55, -55, -55, -55, -55, -55, 155, -55, -55, -55, -55, -55, -55, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 156, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, -44
 , 0, -44, -44, -44, 0, 0, 0, -44, -44, 0, 0, 0, -44, -44, 0
 , 0, 0, -44, 0, 0, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 66, 0, -40, 0, 67, -40, 68, 0, 65, 0, -40
 , 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, 0, -26
 , -26, -26, -26, -26, -26, -26, -26, -26, -26, 0, -26, -26, -26, -26, -26
 , -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, -29, -29, -29, 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29
 , 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29
 , -29, -29, -29, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 158, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17
 , -17, 0, 0, 0, -17, -17, 0, -17, -17, -17, 0, 0, 0, -17, -17
 , -17, 0, 0, -17, -17, 0, 0, 0, -17, 0, 0, -17, 0, -17, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, -8, -8, 0, -8, 0
 , -8, 0, 0, 0, -8, -8, -8, 0, 0, -8, -8, 0, 0, 0, -8
 , 0, 0, -8, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, -16, -16, 0, 0, 0, -16, -16, 0, -16, -16, -16, 0, 0
 , 0, -16, -16, -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, -16
 , 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 89, -23, -23, -23, 160, -23, -23, -23, -23
 , -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23
 , -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6
 , 0, 0, 0, 0, -6, -6, 0, -6, 0, -6, 0, 0, 0, -6, -6
 , -6, 0, 0, -6, -6, 0, 0, 0, -6, 0, 0, -6, 0, -6, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, -7, -7, 0, -7, 0
 , -7, 0, 0, 0, -7, -7, -7, 0, 0, -7, -7, 0, 0, 0, -7
 , 0, 0, -7, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0
 , 0, -5, -5, 0, -5, 0, -5, 0, 0, 0, -5, -5, -5, 0, 0
 , -5, -5, 0, 0, 0, -5, 0, 0, -5, 0, -5, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, -9, 0, 0, 0, 0, -9, -9, 0, -9, 0, -9, 0, 0
 , 0, -9, -9, -9, 0, 0, -9, -9, 0, 0, 0, -9, 0, 0, -9
 , 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, -10, -10
 , 0, -10, 0, -10, 0, 0, 0, -10, -10, -10, 0, 0, -10, -10, 0
 , 0, 0, -10, 0, 0, -10, 0, -10, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4
 , 0, 0, 0, 0, -4, -4, 0, -4, 0, -4, 0, 0, 0, -4, -4
 , -4, 0, 0, -4, -4, 0, 0, 0, -4, 0, 0, -4, 0, -4, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, -3, -3, 0, -3, 0
 , -3, 0, 0, 0, -3, -3, -3, 0, 0, -3, -3, 0, 0, 0, -3
 , 0, 0, -3, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0
 , 0, 23, 19, 0, 17, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0
 , 18, 21, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0
 , 28, 0, 161, 31, 0, 0, 0, 32, 0, 0, 0, 33, 34, 0, 0
 , 0, -54, -54, -54, 0, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54
 , 0, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54
 , -54, -54, -54, -54, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 23, 19
 , 0, 47, 0, 27, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0
 , 0, 0, 20, 0, 0, 22, 0, 29, 0, 0, 0, 0, 28, 0, 0
 , 162, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 0, 0, 25
 , 0, 0, 0, 0, 23, 19, 0, 47, 0, 27, 0, 0, 0, 26, 24
 , 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 22, 0, 29, 0
 , 0, 0, 0, 28, 0, 0, 163, 0, 0, 0, 32, 0, 0, 0, 33
 , 0, 0, 0, 0, 0, -19, -19, 0, 0, 0, -19, -19, 0, -19, -19
 , -19, 0, 0, 0, -19, -19, -19, 0, 0, -19, -19, 0, 0, 0, -19
 , 0, 0, -19, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45
 , 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0
 , 0, 0, 67, 0, 68, 0, 65, 0, -50, 0, 71, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 69, 70, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 66, 0, 0, 0, 67, 0, 68, 0, 65, 0, 0
 , 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 70, 0
 , -51, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 166
 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, -18, -18, 0, 0, 0, -18, -18, 0, -18, -18, -18, 0, 0
 , 0, -18, -18, -18, 0, 0, -18, -18, 0, 0, 0, -18, 0, 0, -18
 , 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 , 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, -20, -20
 , 0, -20, -20, -20, 0, 0, 0, -20, -20, -20, 0, 0, -20, -20, 0
 , 0, 0, -20, 0, 0, -20, 0, -20] 